// Code generated by protoc-gen-go.
// source: tracer.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	tracer.proto

It has these top-level messages:
	LogRequest
	LogResponse
	NodeUpdateRequest
	NodeUpdateResponse
	EdgeUpdateRequest
	EdgeUpdateResponse
	EdgeMessageRequest
	EdgeMessageResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

type LogRequest struct {
	Time    int64  `protobuf:"varint,1,opt,name=Time,json=time" json:"Time,omitempty"`
	NodeID  string `protobuf:"bytes,2,opt,name=NodeID,json=nodeID" json:"NodeID,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=Message,json=message" json:"Message,omitempty"`
}

func (m *LogRequest) Reset()                    { *m = LogRequest{} }
func (m *LogRequest) String() string            { return proto1.CompactTextString(m) }
func (*LogRequest) ProtoMessage()               {}
func (*LogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LogResponse struct {
}

func (m *LogResponse) Reset()                    { *m = LogResponse{} }
func (m *LogResponse) String() string            { return proto1.CompactTextString(m) }
func (*LogResponse) ProtoMessage()               {}
func (*LogResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type NodeUpdateRequest struct {
	Time   int64  `protobuf:"varint,1,opt,name=Time,json=time" json:"Time,omitempty"`
	NodeID string `protobuf:"bytes,2,opt,name=NodeID,json=nodeID" json:"NodeID,omitempty"`
	Status string `protobuf:"bytes,3,opt,name=Status,json=status" json:"Status,omitempty"`
}

func (m *NodeUpdateRequest) Reset()                    { *m = NodeUpdateRequest{} }
func (m *NodeUpdateRequest) String() string            { return proto1.CompactTextString(m) }
func (*NodeUpdateRequest) ProtoMessage()               {}
func (*NodeUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type NodeUpdateResponse struct {
}

func (m *NodeUpdateResponse) Reset()                    { *m = NodeUpdateResponse{} }
func (m *NodeUpdateResponse) String() string            { return proto1.CompactTextString(m) }
func (*NodeUpdateResponse) ProtoMessage()               {}
func (*NodeUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type EdgeUpdateRequest struct {
	Time     int64  `protobuf:"varint,1,opt,name=Time,json=time" json:"Time,omitempty"`
	NodeID   string `protobuf:"bytes,2,opt,name=NodeID,json=nodeID" json:"NodeID,omitempty"`
	EdgeName string `protobuf:"bytes,3,opt,name=EdgeName,json=edgeName" json:"EdgeName,omitempty"`
	Status   string `protobuf:"bytes,4,opt,name=Status,json=status" json:"Status,omitempty"`
}

func (m *EdgeUpdateRequest) Reset()                    { *m = EdgeUpdateRequest{} }
func (m *EdgeUpdateRequest) String() string            { return proto1.CompactTextString(m) }
func (*EdgeUpdateRequest) ProtoMessage()               {}
func (*EdgeUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type EdgeUpdateResponse struct {
}

func (m *EdgeUpdateResponse) Reset()                    { *m = EdgeUpdateResponse{} }
func (m *EdgeUpdateResponse) String() string            { return proto1.CompactTextString(m) }
func (*EdgeUpdateResponse) ProtoMessage()               {}
func (*EdgeUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type EdgeMessageRequest struct {
	Time     int64  `protobuf:"varint,1,opt,name=Time,json=time" json:"Time,omitempty"`
	NodeID   string `protobuf:"bytes,2,opt,name=NodeID,json=nodeID" json:"NodeID,omitempty"`
	EdgeName string `protobuf:"bytes,3,opt,name=EdgeName,json=edgeName" json:"EdgeName,omitempty"`
	Message  string `protobuf:"bytes,4,opt,name=Message,json=message" json:"Message,omitempty"`
}

func (m *EdgeMessageRequest) Reset()                    { *m = EdgeMessageRequest{} }
func (m *EdgeMessageRequest) String() string            { return proto1.CompactTextString(m) }
func (*EdgeMessageRequest) ProtoMessage()               {}
func (*EdgeMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type EdgeMessageResponse struct {
}

func (m *EdgeMessageResponse) Reset()                    { *m = EdgeMessageResponse{} }
func (m *EdgeMessageResponse) String() string            { return proto1.CompactTextString(m) }
func (*EdgeMessageResponse) ProtoMessage()               {}
func (*EdgeMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto1.RegisterType((*LogRequest)(nil), "proto.LogRequest")
	proto1.RegisterType((*LogResponse)(nil), "proto.LogResponse")
	proto1.RegisterType((*NodeUpdateRequest)(nil), "proto.NodeUpdateRequest")
	proto1.RegisterType((*NodeUpdateResponse)(nil), "proto.NodeUpdateResponse")
	proto1.RegisterType((*EdgeUpdateRequest)(nil), "proto.EdgeUpdateRequest")
	proto1.RegisterType((*EdgeUpdateResponse)(nil), "proto.EdgeUpdateResponse")
	proto1.RegisterType((*EdgeMessageRequest)(nil), "proto.EdgeMessageRequest")
	proto1.RegisterType((*EdgeMessageResponse)(nil), "proto.EdgeMessageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for TraceService service

type TraceServiceClient interface {
	Log(ctx context.Context, opts ...grpc.CallOption) (TraceService_LogClient, error)
	NodeUpdate(ctx context.Context, opts ...grpc.CallOption) (TraceService_NodeUpdateClient, error)
	EdgeUpdate(ctx context.Context, opts ...grpc.CallOption) (TraceService_EdgeUpdateClient, error)
	EdgeMessage(ctx context.Context, opts ...grpc.CallOption) (TraceService_EdgeMessageClient, error)
}

type traceServiceClient struct {
	cc *grpc.ClientConn
}

func NewTraceServiceClient(cc *grpc.ClientConn) TraceServiceClient {
	return &traceServiceClient{cc}
}

func (c *traceServiceClient) Log(ctx context.Context, opts ...grpc.CallOption) (TraceService_LogClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TraceService_serviceDesc.Streams[0], c.cc, "/proto.TraceService/Log", opts...)
	if err != nil {
		return nil, err
	}
	x := &traceServiceLogClient{stream}
	return x, nil
}

type TraceService_LogClient interface {
	Send(*LogRequest) error
	CloseAndRecv() (*LogResponse, error)
	grpc.ClientStream
}

type traceServiceLogClient struct {
	grpc.ClientStream
}

func (x *traceServiceLogClient) Send(m *LogRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *traceServiceLogClient) CloseAndRecv() (*LogResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *traceServiceClient) NodeUpdate(ctx context.Context, opts ...grpc.CallOption) (TraceService_NodeUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TraceService_serviceDesc.Streams[1], c.cc, "/proto.TraceService/NodeUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &traceServiceNodeUpdateClient{stream}
	return x, nil
}

type TraceService_NodeUpdateClient interface {
	Send(*NodeUpdateRequest) error
	CloseAndRecv() (*NodeUpdateResponse, error)
	grpc.ClientStream
}

type traceServiceNodeUpdateClient struct {
	grpc.ClientStream
}

func (x *traceServiceNodeUpdateClient) Send(m *NodeUpdateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *traceServiceNodeUpdateClient) CloseAndRecv() (*NodeUpdateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NodeUpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *traceServiceClient) EdgeUpdate(ctx context.Context, opts ...grpc.CallOption) (TraceService_EdgeUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TraceService_serviceDesc.Streams[2], c.cc, "/proto.TraceService/EdgeUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &traceServiceEdgeUpdateClient{stream}
	return x, nil
}

type TraceService_EdgeUpdateClient interface {
	Send(*EdgeUpdateRequest) error
	CloseAndRecv() (*EdgeUpdateResponse, error)
	grpc.ClientStream
}

type traceServiceEdgeUpdateClient struct {
	grpc.ClientStream
}

func (x *traceServiceEdgeUpdateClient) Send(m *EdgeUpdateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *traceServiceEdgeUpdateClient) CloseAndRecv() (*EdgeUpdateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EdgeUpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *traceServiceClient) EdgeMessage(ctx context.Context, opts ...grpc.CallOption) (TraceService_EdgeMessageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TraceService_serviceDesc.Streams[3], c.cc, "/proto.TraceService/EdgeMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &traceServiceEdgeMessageClient{stream}
	return x, nil
}

type TraceService_EdgeMessageClient interface {
	Send(*EdgeMessageRequest) error
	CloseAndRecv() (*EdgeMessageResponse, error)
	grpc.ClientStream
}

type traceServiceEdgeMessageClient struct {
	grpc.ClientStream
}

func (x *traceServiceEdgeMessageClient) Send(m *EdgeMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *traceServiceEdgeMessageClient) CloseAndRecv() (*EdgeMessageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EdgeMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TraceService service

type TraceServiceServer interface {
	Log(TraceService_LogServer) error
	NodeUpdate(TraceService_NodeUpdateServer) error
	EdgeUpdate(TraceService_EdgeUpdateServer) error
	EdgeMessage(TraceService_EdgeMessageServer) error
}

func RegisterTraceServiceServer(s *grpc.Server, srv TraceServiceServer) {
	s.RegisterService(&_TraceService_serviceDesc, srv)
}

func _TraceService_Log_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TraceServiceServer).Log(&traceServiceLogServer{stream})
}

type TraceService_LogServer interface {
	SendAndClose(*LogResponse) error
	Recv() (*LogRequest, error)
	grpc.ServerStream
}

type traceServiceLogServer struct {
	grpc.ServerStream
}

func (x *traceServiceLogServer) SendAndClose(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *traceServiceLogServer) Recv() (*LogRequest, error) {
	m := new(LogRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TraceService_NodeUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TraceServiceServer).NodeUpdate(&traceServiceNodeUpdateServer{stream})
}

type TraceService_NodeUpdateServer interface {
	SendAndClose(*NodeUpdateResponse) error
	Recv() (*NodeUpdateRequest, error)
	grpc.ServerStream
}

type traceServiceNodeUpdateServer struct {
	grpc.ServerStream
}

func (x *traceServiceNodeUpdateServer) SendAndClose(m *NodeUpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *traceServiceNodeUpdateServer) Recv() (*NodeUpdateRequest, error) {
	m := new(NodeUpdateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TraceService_EdgeUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TraceServiceServer).EdgeUpdate(&traceServiceEdgeUpdateServer{stream})
}

type TraceService_EdgeUpdateServer interface {
	SendAndClose(*EdgeUpdateResponse) error
	Recv() (*EdgeUpdateRequest, error)
	grpc.ServerStream
}

type traceServiceEdgeUpdateServer struct {
	grpc.ServerStream
}

func (x *traceServiceEdgeUpdateServer) SendAndClose(m *EdgeUpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *traceServiceEdgeUpdateServer) Recv() (*EdgeUpdateRequest, error) {
	m := new(EdgeUpdateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TraceService_EdgeMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TraceServiceServer).EdgeMessage(&traceServiceEdgeMessageServer{stream})
}

type TraceService_EdgeMessageServer interface {
	SendAndClose(*EdgeMessageResponse) error
	Recv() (*EdgeMessageRequest, error)
	grpc.ServerStream
}

type traceServiceEdgeMessageServer struct {
	grpc.ServerStream
}

func (x *traceServiceEdgeMessageServer) SendAndClose(m *EdgeMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *traceServiceEdgeMessageServer) Recv() (*EdgeMessageRequest, error) {
	m := new(EdgeMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TraceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TraceService",
	HandlerType: (*TraceServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Log",
			Handler:       _TraceService_Log_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "NodeUpdate",
			Handler:       _TraceService_NodeUpdate_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EdgeUpdate",
			Handler:       _TraceService_EdgeUpdate_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EdgeMessage",
			Handler:       _TraceService_EdgeMessage_Handler,
			ClientStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x52, 0x4d, 0x53, 0x83, 0x30,
	0x10, 0x9d, 0x16, 0xa4, 0x75, 0x5b, 0x0f, 0xac, 0x1f, 0x83, 0x9c, 0x1c, 0x4e, 0x3d, 0x71, 0xd0,
	0x9f, 0xe0, 0xc7, 0x8c, 0x33, 0xda, 0x03, 0xad, 0xe3, 0x39, 0x96, 0x1d, 0xa6, 0x07, 0x1a, 0x24,
	0x69, 0x7f, 0x87, 0x3f, 0xd9, 0x90, 0xa4, 0x25, 0x48, 0x4f, 0xea, 0x09, 0x76, 0x37, 0x79, 0xef,
	0xe5, 0xbd, 0x85, 0xa9, 0xac, 0xd9, 0x8a, 0xea, 0xb4, 0xaa, 0xb9, 0xe4, 0x78, 0xa2, 0x3f, 0x49,
	0x06, 0xf0, 0xc2, 0x8b, 0x8c, 0x3e, 0xb7, 0x24, 0x24, 0x22, 0xf8, 0xcb, 0x75, 0x49, 0xd1, 0xe0,
	0x66, 0x30, 0xf3, 0x32, 0x5f, 0xaa, 0x7f, 0xbc, 0x82, 0x60, 0xce, 0x73, 0x7a, 0x7e, 0x88, 0x86,
	0xaa, 0x7b, 0x9a, 0x05, 0x1b, 0x5d, 0x61, 0x04, 0xa3, 0x57, 0x12, 0x82, 0x15, 0x14, 0x79, 0x7a,
	0x30, 0x2a, 0x4d, 0x99, 0x9c, 0xc1, 0x44, 0x63, 0x8a, 0x8a, 0x6f, 0x04, 0x25, 0xef, 0x10, 0x36,
	0x00, 0x6f, 0x55, 0xce, 0x24, 0xfd, 0x86, 0x49, 0xf5, 0x17, 0x92, 0xc9, 0xad, 0xb0, 0x44, 0x81,
	0xd0, 0x55, 0x72, 0x01, 0xe8, 0x02, 0x5b, 0x3a, 0x01, 0xe1, 0x63, 0x5e, 0xfc, 0x81, 0x2e, 0x86,
	0x71, 0x03, 0x30, 0x67, 0xe5, 0xfe, 0x65, 0x63, 0xb2, 0xb5, 0x23, 0xc5, 0xff, 0x29, 0xc5, 0x25,
	0xb5, 0x52, 0x76, 0xa6, 0x6b, 0x6d, 0xfa, 0x6f, 0x2d, 0x4e, 0x00, 0x7e, 0x37, 0x80, 0x4b, 0x38,
	0xef, 0xf0, 0x1a, 0x39, 0xb7, 0x5f, 0x43, 0x98, 0x2e, 0x9b, 0x1d, 0x58, 0x50, 0xbd, 0x5b, 0xaf,
	0x08, 0x53, 0xf0, 0x54, 0x50, 0x18, 0x9a, 0x95, 0x48, 0xdb, 0x45, 0x88, 0xd1, 0x6d, 0x99, 0xeb,
	0xb3, 0x01, 0xde, 0x03, 0xb4, 0x86, 0x63, 0x64, 0xcf, 0xf4, 0xc2, 0x8d, 0xaf, 0x8f, 0x4c, 0x5c,
	0x90, 0xd6, 0xaa, 0x03, 0x48, 0x2f, 0xb2, 0x03, 0x48, 0xdf, 0x57, 0x05, 0xf2, 0x04, 0x13, 0xe7,
	0x85, 0xe8, 0x9e, 0xed, 0xba, 0x1d, 0xc7, 0xc7, 0x46, 0x7b, 0x9c, 0x8f, 0x40, 0x0f, 0xef, 0xbe,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x97, 0x30, 0xb5, 0x57, 0x1c, 0x03, 0x00, 0x00,
}
