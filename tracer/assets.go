// Code generated by go-bindata.
// sources:
// assets/index.html.tmpl
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x58\x5f\x53\xe3\x38\x12\x7f\xf7\xa7\x68\x74\x0f\xeb\xdc\x25\x36\x61\x96\xa9\x3b\x02\x54\xb1\x03\xcc\xe4\x8a\x01\x2a\x09\x35\x45\x51\x3c\x08\x5b\x89\x35\xa3\x58\x59\x49\xce\x9f\xa3\xf2\xdd\xaf\x25\xdb\xc1\x8e\x93\x61\xf6\x2e\x0f\x89\xdc\xea\x5f\xf7\x4f\xdd\xad\x96\xe2\xd3\x83\xcb\xbb\x4f\xa3\xc7\xfb\x2b\x48\xcc\x54\x9c\x7b\xa7\x07\x9d\x8e\x07\x9f\xe4\x6c\xa5\xf8\x24\x31\xe0\x47\x2d\x38\x3a\xec\x7e\x84\x91\xe2\xda\xd0\x14\xa7\xc4\x84\x1a\xd6\xf9\x1a\x5d\x53\x25\x68\xca\x3c\x0f\x46\x09\xd7\x30\xe6\x82\x01\xfe\xce\xa8\x32\x20\xc7\x30\x97\xe9\x9f\x01\x4e\xda\x5f\x2b\x1f\x2b\xc6\x40\xcb\xb1\x59\x50\xc5\x4e\x60\x25\x33\x88\xd0\x9e\x62\x31\x1a\x56\xfc\x25\x33\x08\x37\x40\xd3\x38\x94\x0a\xa6\x32\xe6\xe3\x95\x67\x25\x59\x1a\x33\x05\x26\x61\x60\x98\x9a\x6a\x6b\xdb\x3e\x7c\xbe\x7d\x80\xcf\x2c\x65\x8a\x0a\xb8\xcf\x5e\x04\x8f\xe0\x86\x47\x2c\xd5\x0c\x28\xb2\xb0\x12\x9d\xb0\x18\x5e\xd0\x8a\xd5\xbf\xb6\xfe\x87\x85\x7f\xb8\x96\x68\x96\x1a\x2e\xd3\x36\x30\x8e\xf3\x0a\xe6\x4c\x69\x7c\x86\x0f\xa5\x87\xc2\x5c\x1b\xa4\xf2\xc0\xa7\xc6\x72\x56\x20\x67\x16\xd5\x42\xa2\x2b\x10\x18\x89\x0d\xb0\xba\xd8\xb7\x35\xc5\xc0\x53\x67\x2d\x91\x33\x5c\x41\x82\x66\x70\x4d\x0b\x2e\x04\xbc\x30\xc8\x34\x1b\x67\xa2\xed\x01\xaa\xc2\xb7\xfe\xe8\xcb\xdd\xc3\x08\x2e\x6e\x1f\xe1\xdb\xc5\x60\x70\x71\x3b\x7a\xec\xa1\xaa\x49\x24\xce\xb2\x39\xcb\x0d\xf1\xe9\x4c\x70\xb4\x8b\xeb\x50\x34\x35\x2b\xa4\xeb\xc1\xd7\xab\xc1\xa7\x2f\x08\xb8\xf8\xa3\x7f\xd3\x1f\x3d\x22\x65\xb8\xee\x8f\x6e\xaf\x86\x43\xb8\xbe\x1b\xc0\x05\xdc\x5f\x0c\x46\xfd\x4f\x0f\x37\x17\x03\xb8\x7f\x18\xdc\xdf\x0d\xaf\x02\x80\x21\xb3\x94\x98\xf7\xb3\x60\x8e\x5d\x36\x30\x64\x31\x33\x94\x0b\x6d\x97\xf9\x88\xc9\xd3\xc8\x4a\xc4\x90\xd0\x39\xc3\x24\x46\x8c\xcf\x91\x13\x85\x08\x4b\xe7\xfd\x14\x79\x40\x85\x4c\x27\x6e\x71\x79\xa5\x00\xf4\xc7\x90\x4a\xd3\x06\x8d\xa4\x4e\x13\x63\x66\x27\x61\xb8\x58\x2c\x82\x49\x9a\x05\x52\x4d\x42\x91\x43\x75\x78\x1e\x78\x9d\xce\xb9\xe7\x9d\xea\x48\xf1\x99\x01\xad\xa2\x33\x62\x01\x1a\x11\x51\x9c\x7e\xd7\x41\x24\x64\x16\x8f\x05\x66\x3a\x88\xe4\x34\xa4\xdf\xe9\x12\xf1\x2f\x3a\x8c\x3f\x84\x1f\x82\xe3\xa0\x7b\x8c\xa3\x60\xca\xd3\xe0\xbb\x26\xe7\xa7\x61\x6e\xe9\xfc\x7f\x32\x39\x95\x53\x96\x1a\x34\x14\x1e\x05\xdd\x6e\x70\x54\x08\x3a\x76\x6d\x1d\x21\x23\x2a\x98\xde\xe1\x0a\x7d\x99\x15\x6e\x19\xb3\x9a\xb1\x33\x62\xd8\xd2\x84\x91\x46\x0d\x0f\x20\x10\x3c\xfd\x01\xaf\x38\x02\xc0\x3a\x92\x3f\x70\xbf\xfc\xed\xf0\xf0\xb0\x57\x91\xa0\xf9\xd8\x24\x27\xd0\x0d\x8e\x67\x4b\x3b\xb1\xf6\x2c\x32\x95\x31\x2b\x90\xb8\x21\x45\x13\x87\x92\xf1\x78\xfc\x8e\x25\x64\x69\xb9\x59\x92\x2f\x32\x5e\x59\x4e\xa7\x25\x6f\x70\x9f\x39\x55\xb0\xd0\x70\x06\x29\x5b\xc0\x37\xf6\x32\x94\xd1\x0f\x66\x7c\xb2\xb0\x01\x73\x8b\x4e\xa4\x36\x27\xdd\xa3\x0f\xbf\x1f\x87\xd9\x0c\xb7\x1a\xd3\xa4\xd5\xf3\xaa\x70\xeb\x16\x2d\xfc\xeb\xe3\x61\xbb\x10\xdb\x4f\xc2\x5c\xe3\x39\x83\x63\x4b\xbc\xa2\x1f\x49\x81\xa5\x78\x06\x98\x38\x6d\x83\x1a\x44\x68\x74\x22\xd5\xaa\x7b\xe8\xd7\x2d\xdb\x20\x58\x6e\x4f\xcf\x35\xc3\x54\x8c\x6f\x30\xb0\xcd\x19\xb1\x91\x36\xcd\xf4\xe3\x25\xce\xbc\xae\x7b\x10\x86\x30\xa5\x33\x27\x85\xfe\xa5\x06\x23\x0b\x47\x1c\x1b\xd4\xb2\x82\xdb\x38\x6a\x60\xed\x0c\xb0\x78\xb2\x31\x60\xc7\x4d\x03\x62\x27\x78\x1f\xae\x02\xc4\xbd\x1a\xb1\x3c\x44\x82\x62\xb7\x32\x81\x93\xf8\xad\xca\x62\x5d\x89\x68\xdf\x7d\xd7\xe4\xce\xab\xef\xbe\x6b\xf2\x28\xa1\x6a\xc2\xfc\xce\xef\x87\x87\x0d\xfd\x4b\x77\x28\xa0\x87\xf2\xa1\xa6\xa1\xf9\x7f\x98\xff\xe4\xf2\xdc\x2e\xf2\xfa\x5c\x53\x90\xa9\x4f\x0c\x8f\x7e\x90\xb6\xfd\xae\x27\x51\xcf\x27\x45\xb2\x99\x60\x11\x96\x96\xad\x44\xd2\x0a\xe8\x6c\xc6\xd2\xd8\x27\x38\x4f\x6a\xc6\xa8\x31\x0a\x0b\xd0\x7a\x23\xed\xbc\xba\x76\xcc\xe7\x34\x48\xc9\xa7\x59\x38\xe8\x14\x4d\x17\x5e\x2f\x84\xf0\x89\x8b\x18\x69\x6d\x57\xcc\x0e\x45\x2b\xae\x54\xf9\x38\x4b\x23\x7b\x58\x40\x19\x1d\x5f\xb4\x05\x6f\xbd\x6e\x0c\x85\xa1\x62\x26\x53\xa8\x80\x3d\x45\x1b\xf8\x3b\x7c\xdc\xcc\x15\x33\xa5\x60\xdd\x30\x8a\x91\x57\xc6\x6f\xc1\x9b\xb9\x82\x95\xfd\x09\x70\xc7\x51\xdf\x65\xbf\x48\x6c\xab\xbd\x81\xfa\x31\xa2\x4a\x07\x71\xa0\xf1\x58\x43\x35\x1e\xc3\x3f\x80\x74\x08\x7e\xc7\x81\xb1\x39\x37\x28\xeb\xc1\xba\xd5\xab\x79\x08\xb0\xb9\x31\xe5\xb7\x02\x8e\xdd\x18\x19\x10\x14\x32\x0c\x68\x19\xa7\x22\xd0\x91\xa0\xd8\xce\x50\x5c\x06\xa5\x6e\x63\xc9\x91\x7b\xa0\xd8\x54\xce\x59\x65\xfb\x42\x99\x03\xfb\x53\x5d\x44\x5e\xb5\xfb\x17\x81\x4c\xab\x44\x1d\xbc\x24\x5a\x96\x4c\xc4\x55\x24\x9a\x0c\x77\x5a\x24\x8e\x47\x1e\x8c\x3c\x0a\x05\x4a\x21\xe2\x9f\x0d\x4f\x7b\x97\x93\xb3\x2f\x72\xd5\xdb\x9b\x4c\x6b\xe5\xc1\xb5\x49\xdf\xe8\x36\x8f\xdb\x88\x30\xac\x9a\xdc\x48\xa6\x5a\x62\xd7\x13\x72\xe2\x93\x34\xc3\x2d\x53\xd1\x7b\xa3\xc3\xc7\xfe\xc1\xa6\x73\x05\x09\xd5\x77\x8b\xf4\x5e\xe1\xdd\x43\x99\x95\xcf\xe3\x56\xa5\xfa\x30\x15\xcc\x40\x6a\xbb\x0c\xe1\x31\x39\x01\x1e\xaf\x7b\x95\x59\x67\x25\x98\x65\x3a\xf1\xd3\x56\x63\x02\xcd\x3f\xf1\xf8\xb9\x48\x95\x0e\x04\x4b\x27\xd8\xcf\x3b\xd0\xad\xaa\xd6\x59\x5b\x45\x0c\x5f\xde\x7b\x7e\xae\x86\xe6\x4b\x4d\x1c\x56\x94\xd7\xfb\x83\x68\xbb\x62\x2d\x88\x56\x70\x4b\xa7\xec\x9d\x68\xb2\x4d\x34\xb7\x00\xf5\xb0\x96\x6d\x79\x3b\xaa\x25\xa8\x1e\x5b\x8b\xd8\x9c\x04\xbf\x06\x29\x9a\x10\x5b\x24\xac\xb2\x0b\xf4\x53\x35\xde\xcf\xbd\xdd\x00\x97\xc5\x7c\x27\x63\x26\x37\x36\xd6\x75\xf5\x0d\xa1\xa7\x92\xc1\x73\x7e\x86\x27\xac\xae\x58\x8b\x4f\x22\x6c\xd6\x36\xd8\x5a\xe6\xd6\xc0\x84\x66\xf0\xba\x1f\xfd\xf9\x6e\x04\x5f\xae\x06\x57\xa4\xd5\xa4\x2e\x45\xec\xa8\xef\xe0\x55\x57\xe6\x63\xf0\x9d\x72\xd1\xad\xe0\xe0\x0c\xcb\x75\x2b\x7a\xb9\xda\x41\xae\xb7\x15\x71\x92\x77\x34\xb2\x1d\xf1\x06\x5d\xe9\x2e\xb5\xc5\x39\x4d\xda\xce\xd8\x16\xf3\x4a\xe0\xcd\xaf\x26\xaa\xe1\xa7\x04\xdb\x2a\x2f\x86\xfb\xdd\x14\x9d\xbd\x92\xe1\x6a\x30\xda\xe5\xe2\x4e\x36\xa6\xd6\xef\x7b\x77\x8d\x98\xb4\x0b\xeb\x3b\x7c\xbb\x7a\x2f\xf6\xff\xcf\x95\xec\x92\xab\x05\x95\x23\x77\x77\x84\xfc\xb3\xb7\x10\x2d\xb4\xd2\x3e\x77\x92\x77\xe6\x31\x6e\xa2\x51\x8d\xfb\x94\xf3\x6e\x52\x0e\x1b\x90\xad\x68\xd5\x1e\xd7\xbb\x5a\x4f\xf3\x88\xb7\xcb\xf8\xca\xb4\xa6\x93\x46\xf3\x89\xb9\x6a\x4f\xf5\x64\x68\xd4\xbe\x0e\x54\xcc\x56\xce\x48\x6c\xcc\x28\xc4\x90\xfc\x7b\x78\x77\x1b\xe0\x7f\x6a\xcd\x4a\xad\x27\xf2\x40\x2a\xc5\x55\xef\x64\xd3\x46\x27\x2b\xbc\x37\xcf\x9e\x85\xc6\xfb\xd7\x34\xa7\x8c\x8e\x36\xa7\x60\xad\x4f\xda\xfa\xb3\xa7\x70\x9d\x49\x7e\x32\xd7\xdb\xa3\x95\x34\x36\xdd\x08\xff\xdc\x90\xed\xbe\x08\x4e\xf7\x29\x9f\xc4\xb4\x9f\xe5\x87\x6d\xde\xb9\xc9\xd6\xfe\xac\x1c\x8c\x05\x8a\x3c\xb7\x21\x1f\xde\xe2\x5c\xff\xf2\xed\x79\x68\x9b\x36\x79\xde\xd5\x9f\x76\x7a\x7d\x3b\x2f\xb6\xbd\x56\x4e\x92\x77\xbd\x5e\x15\x91\xfe\xff\x78\x14\xb5\xb3\x8b\x48\x59\x56\x0e\xf7\xdb\xe8\xb7\xbf\xc0\xe4\x92\xab\xb7\x87\xd2\xc5\xaf\x13\xc3\x9a\xda\x26\x54\x2d\x37\x97\xf2\x1b\x39\xf9\x6b\x07\xc2\x56\xe9\xd8\x8a\x6c\x8e\xb6\x2f\x4c\xcd\x0d\x67\xff\x31\xd4\x6e\xbf\xee\x22\x56\xdc\xec\x96\xfb\xae\x75\x71\xb0\xb4\x77\xb9\x1a\xb9\x12\xb4\xda\x0f\x5a\x39\x50\xfd\x0a\x9b\xa3\x96\xdd\xfd\xa8\xe2\x62\xbd\xd7\xe3\xea\x7d\xec\x6a\x1f\x76\x79\xb4\x1f\x5b\x5c\xde\xf7\xfb\x7d\x1f\xbb\xaa\xde\xfb\x77\x44\x5f\x65\xa9\x5f\xa9\x0c\xfc\x9b\xb6\x4c\xd0\x72\x88\x72\xbc\x5f\xa3\x05\x7f\x63\x3f\xef\x1f\xad\x5a\x45\xd4\x9a\xd6\x80\xfd\x99\x31\x6d\x5f\x95\x39\x74\xa5\xdf\x56\x19\xe4\x03\xaf\x51\x1e\x6f\x6f\x54\x70\x1c\xf3\x39\x5e\x0b\xce\xc8\x44\xd1\x59\xd2\xa1\x8a\x51\xfb\xca\x05\xa5\x6e\x96\xa7\xb3\xcc\x14\x2f\x5c\x5e\x32\x63\x64\x4a\x9c\x36\xba\xfd\xc3\xe0\x78\x4e\x45\x86\x53\x03\x64\x01\x32\x8d\x04\x56\x98\x9b\xf4\x5b\xd6\x8a\x43\x9f\x7b\xa7\x61\xfe\x4a\xc4\xf3\xfe\x1b\x00\x00\xff\xff\x13\x2f\x8f\x9b\x3c\x15\x00\x00")

func assetsIndexHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtmlTmpl,
		"assets/index.html.tmpl",
	)
}

func assetsIndexHtmlTmpl() (*asset, error) {
	bytes, err := assetsIndexHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html.tmpl", size: 5436, mode: os.FileMode(420), modTime: time.Unix(1456839786, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html.tmpl": assetsIndexHtmlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html.tmpl": &bintree{assetsIndexHtmlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

