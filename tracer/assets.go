// Code generated by go-bindata.
// sources:
// assets/index.html.tmpl
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\x7b\x6f\xe3\x36\x12\xff\xdf\x9f\x62\x56\x05\x6a\xf9\x56\x96\x1f\xe9\x16\x3d\x3b\x49\x91\xdd\xec\xb6\x39\x64\x93\x20\x0f\x14\x8b\x20\x07\xd0\x12\x6d\xa9\x4b\x4b\x5a\x92\x8e\xad\x5b\xf8\xbb\xdf\x90\x94\x6c\x3d\x9d\xf4\x8a\xf3\x1f\xb1\x44\xce\xfc\xe6\xc9\xe1\x8c\x73\xfc\xe6\xfc\xfa\xc3\xfd\x97\x9b\x8f\x10\xc8\x25\x3b\xed\x1c\xbf\xe9\xf7\x3b\xf0\x21\x4e\x52\x1e\x2e\x02\x09\xb6\xd7\x83\xf1\x70\xf4\x33\xdc\xf3\x50\x48\x12\xe1\x16\x5b\x10\x49\xfb\x9f\xbd\x4f\x84\x33\x12\xd1\x4e\x07\xee\x83\x50\xc0\x3c\x64\x14\xf0\x3b\x21\x5c\x42\x3c\x87\xe7\x38\xfa\xe6\xe2\xa6\xfa\x56\xeb\x73\x4e\x29\x88\x78\x2e\xd7\x84\xd3\x09\xa4\xf1\x0a\x3c\xc4\xe3\xd4\x47\x60\x1e\xce\x56\x12\xd9\x25\x90\xc8\x1f\xc4\x1c\x96\xb1\x1f\xce\xd3\x8e\x5a\x59\x45\x3e\xe5\x20\x03\x0a\x92\xf2\xa5\x50\xd8\xea\xe5\xb7\xab\x07\xf8\x8d\x46\x94\x13\x06\x37\xab\x19\x0b\x3d\xb8\x0c\x3d\x1a\x09\x0a\x04\xb5\x50\x2b\x22\xa0\x3e\xcc\x10\x45\xd1\x7f\x52\xf2\xef\x32\xf9\xf0\x29\x46\x58\x22\xc3\x38\x72\x80\x86\xb8\xcf\xe1\x99\x72\x81\xef\x70\x94\x4b\xc8\xe0\x1c\x88\x79\x07\x6c\x22\x95\xce\x1c\xe2\x44\x71\xf5\x50\xd1\x14\x18\x7a\x62\xc7\x58\x34\x76\x6f\x93\x0f\x61\xa4\xd1\x82\x38\x41\x0b\x02\x84\x41\x9b\xd6\x21\x63\x30\xa3\xb0\x12\x74\xbe\x62\x4e\x07\x90\x14\xfe\xb8\xb8\xff\xfd\xfa\xe1\x1e\xce\xae\xbe\xc0\x1f\x67\xb7\xb7\x67\x57\xf7\x5f\xa6\x48\x2a\x83\x18\x77\xe9\x33\x35\x40\xe1\x32\x61\x21\xe2\xa2\x1d\x9c\x44\x32\x45\x75\x3b\xf0\xf9\xe3\xed\x87\xdf\x91\xe1\xec\xfd\xc5\xe5\xc5\xfd\x17\x54\x19\x3e\x5d\xdc\x5f\x7d\xbc\xbb\x83\x4f\xd7\xb7\x70\x06\x37\x67\xb7\xf7\x17\x1f\x1e\x2e\xcf\x6e\xe1\xe6\xe1\xf6\xe6\xfa\xee\xa3\x0b\x70\x47\x95\x4a\xb4\x73\xc8\x99\x73\x1d\x0d\x74\x99\x4f\x25\x09\x99\x50\x66\x7e\xc1\xe0\x09\xd4\x8a\xf9\x10\x90\x67\x8a\x41\xf4\x68\xf8\x8c\x3a\x11\xf0\x30\x75\x5e\x0e\x51\x07\x08\x8b\xa3\x85\x36\xce\x64\x0a\xc0\xc5\x1c\xa2\x58\x3a\x20\x50\xa9\xe3\x40\xca\x64\x32\x18\xac\xd7\x6b\x77\x11\xad\xdc\x98\x2f\x06\xcc\xb0\x8a\xc1\xa9\xdb\xe9\xf7\x4f\x3b\x9d\x63\xe1\xf1\x30\x91\x20\xb8\x77\x62\x29\x06\x81\x1c\x9e\x1f\xfd\x29\x5c\x8f\xc5\x2b\x7f\xce\x30\xd2\xae\x17\x2f\x07\xe4\x4f\xb2\x41\xfe\x99\x18\xf8\x47\x83\x23\xf7\x9d\x3b\x7a\x87\x4f\xee\x32\x8c\xdc\x3f\x85\x75\x7a\x3c\x30\x48\xa7\xff\x13\xe4\x32\x5e\xd2\x48\x22\xd0\x60\xec\x8e\x46\xee\x38\x5b\xe8\x2b\xdb\xfa\x2c\xf6\x08\xa3\xa2\x41\x14\xca\x92\x29\x1e\x19\x99\x26\xf4\xc4\x92\x74\x23\x07\x9e\x40\x8a\x0e\x80\x4b\x3c\x89\xee\xbc\x0c\xa3\xaf\xf0\x1d\xdf\x01\x30\x9b\xe2\xaf\x78\x6a\x7e\x18\x0e\x87\xd3\xc2\x0a\x0a\xf1\x65\x30\x81\x91\xfb\x2e\xd9\xa8\x8d\x6d\x47\xf1\x87\x51\x3b\x02\x21\xa4\x09\x61\x98\x23\xec\x36\x7c\x22\x02\x95\x62\xe9\x04\xac\xd1\xd0\x19\x0d\xad\xbd\x80\x28\xf6\xe9\x5f\x57\x0d\x8d\x57\x26\x2b\xdb\x67\xb1\x9f\x2a\x53\x8f\x73\x77\x80\xfe\x3c\x13\x0e\x6b\x01\x27\x10\xd1\x35\xfc\x41\x67\x77\xb1\xf7\x95\x4a\xdb\x5a\xab\x38\x68\x5f\x06\xb1\x90\x93\xd1\xf8\xe8\xa7\x77\x83\x55\x82\x27\x98\x0a\xab\x37\xed\x14\xd9\x95\x58\x44\xf8\xe7\xcf\x43\x27\x5b\x56\x9f\x80\xea\x7a\x76\x02\xef\x94\x9a\x05\x7a\x6f\x3c\xf4\x70\x19\xd3\x41\xa8\x50\xb9\x1e\x62\x2e\x62\x9e\xe2\xb2\x5d\x46\x56\x46\x2b\xdd\x1e\x9f\x4a\xc0\x84\xcd\x95\x9f\xeb\x3b\x6c\xb7\x5a\x87\xb9\xf0\x37\xb8\xf3\x7d\x3b\x85\xc1\x00\x96\x24\xd1\xab\x70\x71\x2e\x40\xc6\x99\xa0\x10\xeb\xde\xa6\xc0\xb7\x13\x54\xe3\x55\x3b\x40\xfd\xc5\x0e\x40\x3d\xd7\x01\x58\x23\x73\x1b\x5f\x81\x11\x4b\x80\x47\x8d\x8f\x18\xc1\x22\x28\x5d\xbd\x62\xf7\x0a\xc6\xea\x94\x10\xb6\xfe\x5b\x5a\xd7\x52\x6d\xfd\xb7\xb4\xee\x61\x72\x2d\xa8\xdd\xff\x69\x38\xac\xd1\xdf\x49\x4e\xa3\x85\x0c\xec\xe2\x4b\x8d\xea\x5c\xdf\x48\xa8\x47\xfe\x52\xa2\x10\xe1\x7f\xa8\xfd\xa8\xb3\xc1\xc9\xa2\xff\x54\x22\x88\x23\xdb\x92\xa1\xf7\xd5\x72\xd4\xdf\x72\xa8\xc5\xf3\x22\xcb\x09\xca\xa8\x87\x09\xa8\xf2\xd5\xea\xb9\x24\x49\x68\xe4\xdb\x16\xee\x5b\x25\x30\x22\x25\xc7\x34\x55\xd2\x2c\xc7\xe4\x60\xc3\xbe\x51\xc3\xca\xf5\xa9\xa7\x17\x0a\x45\xe8\x4c\xea\x19\x63\xb6\xa5\xfd\x6a\xf5\xaa\x79\x55\x27\xc4\xd5\x06\xba\x1b\xa2\x0f\x43\x15\x34\xdf\xaa\x33\x5c\x92\x19\x65\x2d\x1c\x7a\xaf\x70\xdc\xe6\xab\xc8\x53\x97\x21\xe4\x01\xb0\x99\xc3\xc2\xde\xf7\x1d\x24\xa7\x72\xc5\x71\x1b\x2b\xa6\x90\xf0\x0f\x18\xff\x94\x6d\x6d\x1b\x21\xf6\x61\x2f\xc3\x84\x73\xb0\x99\x8b\x77\x2a\x99\x31\xea\x17\x36\x76\x12\xb2\xca\xa3\xa1\xa7\x55\xf1\xa3\x69\xab\x54\x3f\x4f\xa1\x64\xe4\x24\xe3\x1e\xec\xa1\x55\x44\x36\x23\x74\x44\x32\x72\x37\x70\x0c\xc9\x18\xbf\x7e\x35\x6f\x13\xfd\x36\x2d\xd3\x8e\xeb\xb4\x63\x43\x3b\xaa\xd2\xa6\x19\x6e\x6a\x68\x53\x83\x9b\x1a\xdc\xb4\x42\x3b\xae\xd3\x8e\x0d\xed\xa8\x48\x9b\xd9\x0a\x9f\x31\xaa\xae\xf8\xc6\xa5\x6d\x2b\x9d\xfa\xca\x88\xde\xbf\xc7\xf0\x16\x6c\x85\xd5\x47\xe1\xf8\xda\x6b\x77\x09\x3a\x04\x99\x8b\xae\xc8\xf2\x4d\x7d\xb9\x58\x71\x49\x76\x98\xa7\x25\x02\x17\xaf\x3c\xca\xed\xfd\x11\x31\xf9\x58\x08\xd5\xfe\x93\x9d\x86\xd0\xb7\x9c\x5c\xac\xed\x3b\x21\xca\xcc\xac\xe8\x2a\xc4\xee\xdb\x70\x5b\x13\xb2\x09\x51\x37\x97\xd3\x65\xfc\x4c\x0b\xe5\x19\xf2\xd3\xa3\xbe\x8c\x92\xa6\x12\x4d\x4b\x04\x35\x25\xbd\x90\x7b\xec\x05\x35\xb1\xb1\x65\x78\x64\x9b\x35\x55\xb7\x87\x11\xe5\x32\x53\xa5\xa6\xdb\x83\x68\x1e\x23\x78\xcb\x3b\x60\x99\x73\x7d\x88\x94\x23\xd9\x2f\x35\x0b\x5a\x3d\x50\x38\xee\xf9\x63\x7b\xb8\xf4\x6e\xc5\x1b\xdd\x04\x17\xbb\x75\x95\x8c\x3a\xdf\xbb\x7e\x77\x52\xf0\x42\x21\x5a\x9f\xa1\xfb\xd6\x77\x05\x76\xc7\x1e\x75\x37\x6f\xbb\xc5\xd7\x14\x5f\x2f\x71\x01\x7c\x57\xaa\x82\x2f\xf1\x4c\x64\x14\xd9\x7b\xba\x75\x1a\xbd\x80\x9f\xae\xf6\x56\x77\xd2\xcd\x55\xee\xb6\x93\xaa\x30\xf5\xe3\x84\x78\xa1\x4c\xbb\x93\x61\x3b\x61\xd6\x9e\xbc\x86\x54\x61\xa2\xf4\x19\x5b\xd1\x03\x92\x0d\x20\xd2\xe1\x2c\x73\x80\x2c\x44\xff\x1d\x48\x77\x6d\x1e\xa6\x7c\x43\xfa\xb8\xba\x6d\xb2\xad\x24\x0e\x55\xc4\xfa\x6a\x14\x90\x59\x12\xa9\x43\x56\x49\x82\xbc\x84\xef\x9e\xdb\xd3\xc0\x6c\x57\xf3\x40\x35\xa3\x0d\x79\xf0\x6a\x7d\x0e\x70\x66\xa9\x54\x8c\xab\xd6\xa1\xdd\x6f\x07\x1c\x58\xf2\x9f\x81\x41\x07\xbe\x8c\x34\x18\x74\xfd\x4d\x0b\xd6\xee\x46\xc8\x33\xd8\xc9\x13\xb5\x37\x18\xbf\x02\x5b\x23\xc3\x51\x7b\x52\x15\x28\x0f\x26\xdf\x9e\x6e\x1e\xe3\x34\xa1\xda\x99\xee\x64\xf4\x2a\x7a\x93\xb5\xaa\xd3\xef\xb6\x14\x23\xfd\x29\xc5\xfb\xa6\xf9\xec\x17\x88\x55\xe4\xba\x1b\xe5\xea\x49\xc0\xe9\xbc\xdb\x56\xbb\x7f\x28\x66\xf3\xff\x27\x8b\x94\xc2\x76\x73\xf8\x74\xab\xb1\x2d\x1e\x09\xdd\xab\xba\xd9\xb5\xd6\x7e\xef\xa9\xea\xfa\xa0\x27\x0a\x5b\x0a\x27\xf4\x1d\xe4\x90\xb4\x78\x0f\x86\x73\xfb\xcd\xae\x7b\x77\x03\x22\xae\xd7\xd1\x0d\xc7\xb1\x9e\xcb\xd4\x0e\xfd\x5e\xa9\x31\x61\x54\x42\xa4\x3a\x6d\x75\xcd\x4d\x20\xf4\x0b\x7d\x89\x29\xe5\xc2\x4d\x56\x22\xb0\xa3\x5e\x6d\x03\xe1\x1f\x43\xff\x29\xbb\xce\xf2\x9b\x05\xef\xee\x51\x43\x9b\x53\xb7\x44\x75\xf1\x25\x4b\xd4\xc2\x15\x59\xd2\xba\x49\x4a\x4b\xaa\x57\x51\xd8\xbf\xee\xae\xaf\xdc\x84\x70\x41\x6d\x43\x38\x2d\x99\x9e\x8f\x0f\x55\xcb\x73\xf4\xb2\xfd\x8a\x63\x37\xb1\xbc\x8e\x25\x73\x1a\x5d\x07\xb4\x70\x9b\x8b\xc7\xa2\x4f\x9e\xa6\xcd\x0c\xda\xd3\xe6\xc0\xa2\xb7\x77\x18\xdb\x32\xf9\x4e\xa1\xc7\x5c\x83\x27\x33\x6b\x06\xb4\x48\xb8\x05\xca\x04\x85\xba\x6e\x31\xf3\xb5\xa8\x06\x9c\xb2\x20\xd5\xb1\x6a\xe2\xac\x88\xc0\x9b\x13\x4c\x01\xf8\xf1\x47\x78\x63\x96\x2b\x0e\xb1\x4c\x89\xb1\xaa\x0e\xd9\x59\x28\x5f\xeb\x91\x2c\xa6\xaa\xe2\x97\x43\xba\xf3\x79\x13\x3d\x4a\xc8\xba\xbc\x82\x17\x8b\x06\x38\xb9\x86\x93\x9d\x36\x8e\xa5\x8e\x1a\x2e\x68\x61\xee\x07\x7c\x71\xac\xbc\x49\x57\xcb\x3a\x89\xdc\xf3\x6c\x65\x5b\x93\xab\x33\xc3\x9c\x01\x23\xbe\xae\x5a\x96\x72\xa5\x70\x19\xbe\xa6\x33\xf1\x42\x90\x15\x63\x99\xb8\xa4\x53\xe1\xa5\x21\x01\x94\x97\x88\x9e\x95\x4f\xb4\x02\x8f\x75\xdd\x4a\x91\xd0\xb4\x8f\x7b\x7f\x28\x1d\x2a\x1e\x99\x56\x7f\x2b\x68\xc2\x44\x36\x0d\xd5\x74\xf2\xeb\x83\x98\xa2\xfc\x4c\x85\x20\x8b\xda\xd9\xf7\x43\xee\x2c\xc5\x02\x67\xac\x62\x01\xf0\xe2\x48\xc4\x8c\xba\x2c\x5e\xd8\xd9\xee\xb4\x54\x1d\x70\xb1\x9c\x47\x19\xd5\xa3\xf5\x60\x15\x0c\x2e\xe2\x58\x74\x89\x33\x75\xa3\xf4\x7a\xfd\x5d\x0b\x1c\xc4\x97\x46\x65\x14\xb4\x2b\xea\xb4\x3a\x8c\x35\x64\xb4\xee\x6b\xca\x55\x4a\xa7\x62\xf5\x70\xdd\xa7\x09\xb5\xaa\xe5\x09\x34\xed\xa3\xd9\x44\x37\x9f\x98\x96\xdc\x14\x4e\xab\x72\x0e\x0b\x97\x43\xc6\x65\x3d\x39\x60\x1e\xaf\x70\xef\xe2\x7c\xff\x7e\xa7\x82\x6c\x3d\xf5\x1a\x2a\x4a\xa3\xd4\x7d\xb9\xae\x4a\x2d\x14\xf2\x17\xa5\x7e\xcc\x3c\xfd\xf7\xf4\xc8\x72\xa7\x49\x91\x3c\xad\x34\x5f\xf7\xbe\xfb\x17\x34\x39\x0f\xf9\xfe\x25\x17\xf1\x7a\xc5\x30\xa7\xaa\x0a\x15\xd3\x4d\x87\xfc\x32\x5e\x34\xe1\x1d\xe6\x2a\x73\x74\xea\x4f\xd5\xa6\xa1\x7e\xe0\xd4\x4f\x47\xa5\x61\x59\x0f\x69\xd9\xa8\xb7\x29\x8d\x8d\x48\x05\xbb\x2e\x65\x33\x85\x4a\x6f\x94\x33\xa5\xed\x4c\xa9\x66\x2a\x4f\xc4\x86\x6b\x33\x6a\xe7\xca\xe7\xb2\x36\x89\xe9\xcb\xbc\x69\x1b\xef\x66\xdc\xce\x9b\x8f\x7b\xad\x72\x5f\xe6\x6d\x95\x9b\x4f\xd1\x95\x16\xb4\x72\x13\xec\xe0\xf2\x2a\x0c\xbf\x82\x55\xfc\x6d\xdc\x82\x09\x58\x85\xd7\xca\xed\xd0\x34\x5d\x67\x7d\x30\x0e\x7a\x15\xdd\x55\x8d\x52\x03\xf4\xc9\xdf\x1d\x87\xab\xf7\xd9\xab\x3f\x99\xb9\x4a\x89\x9a\xea\x66\xd0\x33\xba\x4b\x4e\x22\x81\x5d\xf1\xb2\xd2\xc2\x7f\xaf\xb5\x30\x7b\x25\x8f\xf7\x06\xd5\x5a\x14\x80\xd9\x2c\x56\xbf\x2a\xcb\x20\x14\x2e\x92\xbf\x7f\x1f\x6f\xec\xda\x65\x8e\x0a\x2a\x22\x45\x8b\x5e\xd1\x5f\xfa\x77\xd2\xc1\xb8\x81\x32\xcd\x29\x53\x43\x69\x7e\x30\x6d\x24\xcd\xc6\x0e\x1e\xab\x7a\x67\x8f\x7e\x19\xa2\x37\xb9\x71\x3b\x47\x77\xf7\xba\x75\x9e\x6d\xb9\xba\xd5\x2b\x45\x03\xf0\xf0\x30\xd0\xf6\x50\x95\xe0\xab\xc8\x2e\xb8\xcd\x3f\x72\x37\x01\x66\xf1\x00\xd7\xad\x9e\xf2\xd8\x7e\x98\x31\xf7\x5c\x39\x97\x4b\x97\xeb\x2d\xfd\xb6\xc2\x46\x02\x93\x59\x73\x4f\x0f\x6a\x50\x28\x60\xfb\xff\x3c\xe1\xb3\x1f\x3e\x63\x3f\x7a\x62\x2d\x38\x49\x82\x3e\xe1\x94\xa8\x7f\x4d\xe1\xaa\xde\x0d\xa3\x64\x25\xb3\x7f\x4c\xcd\x56\x52\xc6\x91\xa5\xa9\x51\xe0\x7b\x89\xcf\xcf\x84\xad\x70\xeb\x16\xe5\x43\x1c\x79\x0c\x6b\xa0\xde\xb4\x7b\x0a\x45\x73\x9f\x76\x8e\x07\xe6\x7f\x3c\x9d\xce\x7f\x03\x00\x00\xff\xff\x9d\xb5\x2b\xdf\x64\x1e\x00\x00")

func assetsIndexHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtmlTmpl,
		"assets/index.html.tmpl",
	)
}

func assetsIndexHtmlTmpl() (*asset, error) {
	bytes, err := assetsIndexHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html.tmpl", size: 7780, mode: os.FileMode(420), modTime: time.Unix(1456867181, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html.tmpl": assetsIndexHtmlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html.tmpl": &bintree{assetsIndexHtmlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

