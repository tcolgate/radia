package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _assets_index_html_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\xb0\xec\x85\x6e\x1d\x49\xce\x63\xd3\x3a\x0f\x60\xdb\x5d\x14\xe8\xa1\x5b\xec\x16\x28\x8a\x20\x07\x9a\xa2\x2c\x26\x8c\xa8\x92\x94\x6d\x35\xf0\x7f\xef\x90\x94\x6c\x2a\xb6\xba\xf5\x41\x91\xe6\xf1\xcd\xf0\x9b\x8f\x0c\x6f\xbf\xf9\xf0\xe9\xe7\x3f\xfe\xfa\xfd\x23\x2a\xed\x8b\xbc\x9f\xdc\x1a\xa6\x45\x6d\x91\xd1\xec\x0e\x97\xd6\xd6\x66\x91\xa6\x2c\xaf\x9e\x4c\xc2\xa4\x6a\xf2\x42\x52\xcd\x13\xa6\x5e\x52\xfa\x44\xb7\xa9\x14\x4b\x93\xe6\x17\xe9\x45\x72\x95\xcc\xaf\xe0\x2d\x79\x11\x55\xf2\x64\xf0\xfd\x6d\x1a\x90\xee\x27\x80\x69\x5b\xc9\x91\x6d\x6b\x7e\x87\x2d\xdf\xda\x94\x19\x88\x98\x20\x94\xb0\x92\x6a\x8b\x34\x67\x16\xbd\xc2\x37\x42\x85\x90\x72\x81\x8c\xe5\x5c\x2e\x65\xc3\x6f\xbc\xd1\x58\xad\x9e\xf9\x02\x6d\x4a\x61\xbd\x69\x37\x71\xc9\x52\x54\xcf\x5d\x5a\x1f\xf1\x6d\x96\x65\x71\xce\xd9\x46\xe4\xb6\x5c\xa0\x79\x72\x55\x6f\x0f\x99\x95\xca\xf9\xa0\xe0\xdb\x3c\xb0\x14\x45\xf1\x3f\x91\x12\x8a\x5e\x7b\x9c\x79\x71\x7d\xbd\xbc\xbc\x01\x6f\xef\x5c\x1e\x9c\x45\x71\x5d\x64\x3c\x76\xb2\x83\xf3\x9c\xd1\xec\x9c\x39\x27\x50\xe7\x08\x73\xcc\x2d\x55\xde\x3a\xa2\x6e\x7b\x32\x91\xff\xad\xa9\x46\x1b\x83\xee\x50\xc5\x37\xe8\x4f\xbe\xfc\xa2\xd8\x33\xb7\x04\x6f\xdc\xb4\xa4\x62\x54\x96\xca\xd8\xc5\xfc\xfc\xe2\xf2\x2a\x6d\xea\x9c\x5a\x6e\xf0\xf4\x66\x12\xa7\xbb\xe5\x00\xc2\x8f\xef\xb2\x59\x67\x76\xbf\x92\x8b\x55\x69\xc1\x7e\xe5\x08\x89\xe2\x99\x92\x4a\x83\x1d\x46\x6c\x00\x1f\x5a\x07\xd0\x95\xd2\xed\x3c\x23\x43\x64\xb7\x30\xd7\xdb\xc3\x63\x0c\xec\x86\x15\xac\x83\xe0\x42\x69\xc6\x03\xac\xa4\xad\x6a\x6c\xe2\x2d\x64\x1a\xa5\x7a\xaa\x0c\xf1\xcf\x81\xdd\x63\x12\xff\x1c\xd8\x9d\xaa\x56\x9c\x9c\x5d\x66\xd9\x51\xfc\x07\x61\x2c\xad\xa0\x42\xff\x31\x88\x30\xe2\x1f\x4e\x1e\x3c\x37\xb3\x8e\x8b\xc7\x41\x80\xaa\x08\xb6\x82\x3d\xe3\x99\x7b\x0e\x17\x6e\xd6\xab\x8e\x20\x2e\x41\xd1\x04\xbb\xe9\xe1\x69\x42\xeb\x9a\x57\x39\xc1\xe0\xc7\x03\x30\x6a\xad\x86\xa1\xb9\x6a\x78\x16\x26\x72\xc2\x1f\xda\xc0\x7d\x3f\xc7\x64\x43\x51\x80\xee\xaa\xbe\x97\x92\x60\xcf\x18\x9e\xbe\xe5\xff\x44\xa0\x33\x47\xca\x28\x9a\x8a\x59\xa1\x2a\xd4\xb3\x43\xe4\x4c\x8a\xe9\xeb\x1e\x48\x73\xdb\x68\x70\xc3\x11\x60\x2c\xfa\x0e\xbd\xcb\x3a\xd7\xee\x08\x22\xe8\x8e\xc0\x83\x4e\xd1\x01\x21\x4d\xd1\xfb\x3c\x47\xb4\x6a\x83\x52\xf6\x0e\x17\x18\x46\xed\x34\xf0\x91\xb2\x92\xf4\x58\xa4\x8a\x5a\x40\x21\x2f\xa9\x1b\x53\x82\xe3\x66\xef\xd8\x1d\xd6\x11\xeb\x6d\x58\xc0\xdb\x8f\x0b\xc8\x41\x81\x10\xe4\x0b\xbc\x1a\xd5\x80\x20\x17\xa1\xe8\x83\x4c\xc2\xf7\xe3\xcc\x3a\x8d\xd9\x83\x3d\x7c\x3f\xce\x90\x63\x66\xd1\x31\xb4\x7b\xd3\x5e\xff\xee\x45\x3e\xd4\xef\xde\x07\xfa\xd4\x96\xec\x83\x77\xc7\xc3\xe9\x22\x22\x52\xbb\xe9\xba\x3f\x89\x5b\x26\x89\x0b\x4c\x67\xfb\x54\x92\x43\x56\x3f\xc4\xbc\x5b\x4b\x22\x72\xf4\x3d\xc2\x67\x18\x9e\x79\xb7\x0e\xb0\xdd\x0c\x3a\xf6\xd0\xbc\xb2\x5c\x93\x69\x22\x2a\xc3\xa1\x03\x0c\x46\x0e\xc2\xec\xf5\xd6\x09\x96\x49\x0a\xe7\x3b\x98\x7b\x71\x0d\x31\xb6\x02\x7a\x4f\x34\x7f\x51\x6b\x4e\xe2\x91\x75\x5a\xf6\x07\x63\xb4\x88\xb0\xfb\xc7\x17\x01\x9d\xc6\x8d\xfa\xf4\xbe\xd1\x7e\xeb\x31\xa1\x99\x3c\xee\xf0\x24\x22\xf6\x7d\x04\x32\x02\x0b\x5d\x96\x86\x8c\x1f\x8e\x2a\x8d\x2e\x27\x74\xff\x76\x9a\xbd\x7f\x63\xe0\x2c\x79\xe1\xc6\xd0\x95\x5b\xf4\xbe\x13\x1e\x8f\x95\xa9\xca\x28\x38\x6b\xa5\x5a\x11\xfc\x8b\x02\x59\xb9\xb6\xf8\x1a\x96\xe7\x19\x8a\x9a\x71\x87\x81\x33\x01\xd6\xaf\x5f\x3e\xfd\x96\xd4\x54\x1b\x4e\x4e\x86\xc6\x1b\xf3\x3f\x54\xe6\x0e\x38\x32\xda\x8d\x3f\x04\xa7\x43\x2e\x3a\x72\xb7\x63\xcc\xe6\xc9\xd6\xd1\x19\x6d\xb4\xfd\x21\xc7\xda\xf1\xa4\xd6\x27\x0d\x55\x14\xb2\xb6\xf3\xf1\xac\x4e\xdb\xa3\x15\xdb\xaf\xe7\xb6\x63\xb9\xdb\xf3\xf1\xdc\x6e\xff\x8c\xd7\xfd\x7a\x6e\x1b\x6f\xbd\x13\x93\xd1\x4d\x45\xa2\xf3\x0a\xfe\xe3\x6c\x4b\x40\x4e\xc1\x0e\x12\x07\x84\xc3\xb9\x16\x34\x11\x4f\xf1\xcd\x1c\x3f\xf3\xbf\x1b\x0e\xf7\xad\x1c\xf9\xec\x53\xc7\xd5\xce\xbd\x1c\xee\x73\xf0\x9e\x8b\x35\x12\xf9\x1d\x5e\x69\x5a\x97\x67\x70\x23\xa4\xee\xc2\x07\x56\xef\x15\x55\xdd\xd8\xee\xba\xb7\x6c\xac\x55\x15\xf6\xd1\x50\xe0\x27\x0b\xef\x6b\x0a\x37\xbb\x3b\xfc\x19\xea\x21\x55\x31\x09\x4a\xf2\x4e\x32\x75\x28\x3e\x1b\x2e\xa2\x69\xb8\xfb\x4c\x26\xff\x06\x00\x00\xff\xff\x24\x07\x81\x99\xa3\x0a\x00\x00")

func assets_index_html_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_assets_index_html_tmpl,
		"assets/index.html.tmpl",
	)
}

func assets_index_html_tmpl() (*asset, error) {
	bytes, err := assets_index_html_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/index.html.tmpl", size: 2723, mode: os.FileMode(420), modTime: time.Unix(1455469834, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html.tmpl": assets_index_html_tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assets": &_bintree_t{nil, map[string]*_bintree_t{
		"index.html.tmpl": &_bintree_t{assets_index_html_tmpl, map[string]*_bintree_t{}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
