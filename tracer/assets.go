// Code generated by go-bindata.
// sources:
// assets/index.html.tmpl
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x58\xeb\x53\xe3\x38\x12\xff\xee\xbf\xa2\xd1\x55\xed\x3a\x77\x8e\x93\x30\xcb\xd6\x1d\x01\xae\x58\x1e\xbb\x5c\x31\x40\x41\xa8\x29\x8a\xe2\x83\xb0\x95\x58\x33\x8a\x95\x95\x94\xd7\x4d\xf1\xbf\x5f\x4b\x7e\xc4\x8e\x9d\x61\xe6\x96\x0f\x89\xdd\xea\xfe\xf5\xaf\x1f\x6a\x89\x1c\xed\x9d\xdf\x9e\x8d\x9e\xee\x2e\x20\x31\x53\x71\xe2\x1d\xed\x75\xbb\x1e\x9c\xc9\xd9\x5a\xf1\x49\x62\xc0\x8f\x3a\xb0\xdf\x1f\xfc\x0a\x23\xc5\xb5\xa1\x29\x2e\x89\x09\x35\xac\xfb\x31\xba\xa4\x4a\xd0\x94\x79\x1e\x8c\x12\xae\x61\xcc\x05\x03\xfc\x9e\x51\x65\x40\x8e\x61\x21\xd3\x3f\x43\x5c\xb4\xdf\x56\x3e\x56\x8c\x81\x96\x63\xb3\xa4\x8a\x1d\xc2\x5a\xce\x21\x42\x3c\xc5\x62\x04\x56\xfc\x75\x6e\xd0\xdc\x00\x4d\xe3\x9e\x54\x30\x95\x31\x1f\xaf\x3d\x2b\x99\xa7\x31\x53\x60\x12\x06\x86\xa9\xa9\xb6\xd8\xf6\xe5\xf7\x9b\x47\xf8\x9d\xa5\x4c\x51\x01\x77\xf3\x57\xc1\x23\xb8\xe6\x11\x4b\x35\x03\x8a\x2c\xac\x44\x27\x2c\x86\x57\x44\xb1\xfa\x97\xd6\xff\x43\xee\x1f\x2e\x25\xc2\x52\xc3\x65\x1a\x00\xe3\xb8\xae\x60\xc1\x94\xc6\x77\xf8\x50\x78\xc8\xe1\x02\x90\xca\x03\x9f\x1a\xcb\x59\x81\x9c\x59\xab\x0e\x12\x5d\x83\xc0\x4c\x94\x86\xd5\x60\x37\x31\xc5\xc0\x53\x87\x96\xc8\x19\x46\x90\x20\x0c\xc6\xb4\xe4\x42\xc0\x2b\x83\xb9\x66\xe3\xb9\x08\x3c\x40\x55\xf8\x74\x35\xfa\xe3\xf6\x71\x04\xa7\x37\x4f\xf0\xe9\xf4\xfe\xfe\xf4\x66\xf4\x34\x44\x55\x93\x48\x5c\x65\x0b\x96\x01\xf1\xe9\x4c\x70\xc4\xc5\x38\x14\x4d\xcd\x1a\xe9\x7a\xf0\xf1\xe2\xfe\xec\x0f\x34\x38\xfd\xed\xea\xfa\x6a\xf4\x84\x94\xe1\xf2\x6a\x74\x73\xf1\xf0\x00\x97\xb7\xf7\x70\x0a\x77\xa7\xf7\xa3\xab\xb3\xc7\xeb\xd3\x7b\xb8\x7b\xbc\xbf\xbb\x7d\xb8\x08\x01\x1e\x98\xa5\xc4\xbc\x6f\x25\x73\xec\xaa\x81\x29\x8b\x99\xa1\x5c\x68\x1b\xe6\x13\x16\x4f\x23\x2b\x11\x43\x42\x17\x0c\x8b\x18\x31\xbe\x40\x4e\x14\x22\x6c\x9d\xf7\x4b\xe4\x01\x15\x32\x9d\xb8\xe0\xb2\x4e\x01\xb8\x1a\x43\x2a\x4d\x00\x1a\x49\x1d\x25\xc6\xcc\x0e\x7b\xbd\xe5\x72\x19\x4e\xd2\x79\x28\xd5\xa4\x27\x32\x53\xdd\x3b\x09\xbd\x6e\xf7\xc4\xf3\x8e\x74\xa4\xf8\xcc\x80\x56\xd1\x31\xb1\x06\x1a\x2d\xa2\x38\xfd\xac\xc3\x48\xc8\x79\x3c\x16\x58\xe9\x30\x92\xd3\x1e\xfd\x4c\x57\x68\xff\xaa\x7b\xf1\x87\xde\x87\xf0\x20\x1c\x1c\xe0\x53\x38\xe5\x69\xf8\x59\x93\x93\xa3\x5e\x86\x74\xf2\x7f\x41\x4e\xe5\x94\xa5\x06\x81\x7a\xfb\xe1\x60\x10\xee\xe7\x82\xae\x8d\xad\x2b\x64\x44\x05\xd3\x2d\xae\xd0\x97\x59\xe3\x96\x31\xeb\x19\x3b\x26\x86\xad\x4c\x2f\xd2\xa8\xe1\x01\x84\x34\x32\x98\xce\x6b\x9e\x7e\x81\xaf\xf8\x0e\x80\xdd\x24\xbf\xe0\xae\xf9\x5b\xbf\xdf\x1f\x56\x24\xe8\x24\x36\xc9\x21\x0c\xc2\x83\xd9\xca\x2e\xbc\x79\xd6\x9e\xa7\xbb\x11\x28\xa5\x6d\x08\xfd\x02\xa1\x5c\x88\xa9\x4e\x6c\x8b\xad\x0f\x81\x0c\xfa\xc1\xa0\x4f\x36\x0e\x52\x19\xb3\x1f\xa7\x86\xc1\xdb\x90\x6d\xec\xaf\x32\x5e\xdb\x50\x8f\x8a\x74\x80\xfb\x5b\x50\x05\x4b\x0d\xc7\x90\xb2\x25\x7c\x62\xaf\x0f\x32\xfa\xc2\x8c\x4f\x96\xb6\x0e\x2e\x97\x89\xd4\xe6\x70\xb0\xff\xe1\x97\x83\xde\x7c\x86\x3b\x98\x69\xd2\x19\x7a\x55\x73\xeb\x16\x11\xfe\xf5\x6b\x3f\xc8\xc5\xf6\x2f\x61\x6e\x9e\x1d\xc3\x81\xa5\x59\xd1\x8f\xf6\xfb\x11\x8a\xb1\x1d\xb4\x2d\x55\x18\x21\xe6\x44\xaa\x35\x8a\xfd\x3a\xb2\x0d\xda\x72\x7b\x7e\xa9\x01\x53\x31\xb6\x79\x6e\xae\x88\x52\xda\x84\xb9\x8a\x57\xb8\xf2\xf5\x6d\x08\xbd\x1e\x4c\xe9\xcc\x49\xe1\xea\x5c\x83\x91\xb9\x23\x8e\x73\x6f\x55\xb1\x2b\x1d\x35\x6c\xed\x0a\xb0\x78\x52\x02\xd8\xe7\x26\x80\x68\x35\xde\x65\x57\x31\xc4\x11\x10\xb1\x2c\x47\x82\xe2\x10\x34\xa1\x93\xf8\x9d\x4a\xb0\xae\x25\xb4\xef\x3e\x6b\x72\xe7\xd5\x77\x9f\x35\x79\x84\xcd\x35\x61\x7e\xf7\x97\x7e\xbf\xa1\xff\x60\x14\x4b\x27\x26\xf1\xab\x2f\x0d\xad\x73\x77\x22\x21\x8f\xe2\xa5\xa6\xa1\xf9\x7f\x99\xff\xec\xba\x21\xc8\xab\xff\x52\x53\x90\xa9\x4f\x0c\x8f\xbe\x90\xc0\x7e\xd6\x4b\xad\x17\x93\xbc\x27\x98\x60\x11\x36\xa0\xed\x57\xd2\x09\xe9\x6c\xc6\xd2\xd8\x27\xb8\x4e\x6a\x60\xd4\x18\x85\x6d\x6a\xbd\x91\x20\xeb\xc1\x96\xf5\x8c\x06\x29\xf8\x34\xdb\x0b\x9d\x22\x74\xee\xf5\x54\x08\x9f\xb8\xbc\x92\xce\x76\x5f\xb5\x28\x5a\x71\x65\x2f\x8c\xe7\x69\x64\x4f\x2a\x28\xb2\xe3\x8b\x40\xf0\xce\xd7\x12\x48\x31\x33\x57\xb8\x8c\xe3\x4c\x1b\xf8\x3b\x0c\xf6\xf3\xa5\xb7\x56\x88\x4d\x4d\xea\x30\x7c\x0c\xbe\x08\xf1\xc0\xa3\xaf\x82\xc5\x95\x85\xd2\x43\x3e\x16\x1c\xf4\x70\xdb\xfd\x60\xb8\xd3\x2b\x56\x57\x19\xbf\x03\x1b\xc8\x3c\x72\xfb\x15\xe2\xde\xa7\xbe\xeb\xc3\xbc\xc5\x3a\x41\x69\xea\xc7\x68\x55\x78\x88\x43\x8d\xe7\x36\xaa\xf1\x18\xfe\x01\xa4\x4b\xf0\x33\x0e\x8d\xed\x3e\x83\xb2\x21\xbc\x75\x86\x35\x0f\x21\x4e\x6f\xa6\xfc\x0e\x8e\x51\xcd\x90\x01\x41\x21\xc3\xa2\x15\xb5\xd8\xd6\x5e\x71\x64\x19\x2a\x36\x95\x0b\x56\x19\x19\x50\x54\xd4\x7e\x55\xe9\x66\x3b\x65\x37\x5d\xe4\x54\xa5\xe4\xcc\x0b\x4a\x45\x03\x46\x5c\x45\x82\xb5\xf5\x20\xde\xc3\x04\xa9\x62\x07\x1c\xd1\x73\x70\x3b\xec\xb2\x3d\x1a\x8a\x6c\x53\xa1\xab\x26\x46\x24\x28\x1e\x45\x18\x71\x16\x70\x53\x41\xe1\xe2\x3f\x1b\x1c\x77\x26\x22\x8b\x3b\xaf\xe7\xee\x82\x5b\x94\x47\x37\xd4\x7d\xa3\x03\x1e\x07\x68\x61\x58\xb5\x01\xf8\xd8\xdf\x2b\x07\x68\x98\x50\x7d\xbb\x4c\xef\x14\xde\xac\x94\x59\xfb\x3c\xee\xd4\xda\x4f\x30\x03\xa9\x1d\x76\x84\xc7\xe4\x10\x78\x5c\xe9\xbe\x8c\xb2\x0e\x67\x73\x9d\xf8\x69\xa7\xb1\x80\xf0\xcf\x3c\x7e\xc9\xab\x57\x64\x0b\xba\x9b\x7e\xad\x34\x73\x33\x12\x3b\x48\x6b\x91\x58\xc1\x0d\x9d\xb2\x66\x48\x96\x25\x73\x52\x74\xf6\x9f\x87\xdb\x9b\x10\x6f\xd0\x9a\xf9\x99\xe2\xb0\x16\x7a\x31\xc1\xb7\x23\x2f\xd0\xeb\xf1\x5b\x8b\xf2\xd0\xf8\x3e\x93\x3c\x69\x6c\x99\xb0\x4a\xf3\xea\xe7\x6a\x4e\x5e\x86\xed\x06\x2e\xd3\xd9\x56\xc3\x6c\x97\x18\x6f\x75\xf5\x92\xd0\x73\xc1\xe0\x25\x3b\xee\x13\x56\x55\x7c\x03\x26\x34\x83\x26\x37\x29\x62\xe7\xaa\x05\xa7\xee\xc8\xce\x25\xa7\x9c\x6f\x7f\xd8\x3b\xc6\x16\x80\x9f\x7e\x82\xbd\x4c\xbc\x95\x10\x92\x4d\x04\xb2\x9d\x90\x32\x42\xf3\xbd\x19\xc9\x6b\x6a\x77\x7c\xbd\xa4\x65\xce\xdb\xf4\xd1\x43\x3e\xde\x2a\x59\xac\x06\x10\x14\x0c\x0f\x4b\x36\x01\xb1\xb3\x1b\x05\xce\x59\x78\x86\x2f\x01\x29\x46\xb1\x15\xbb\x26\x0a\xcf\x73\xc9\x5b\xc3\xaf\xeb\x8c\x6c\x0f\x64\xee\x9b\xd4\xf2\x96\xab\x95\x2b\xb3\x6b\xdb\x13\xef\x14\xd9\x1a\xd6\x95\x6b\x9c\x2a\x2f\x2d\x0d\x60\xb3\x44\xdd\x75\xe5\xd8\x11\x78\x6e\x72\xab\x55\xc2\xe9\x3e\x6f\xf2\x61\x39\x6c\x65\x64\xb8\x7d\x5d\x6b\xc3\x44\x33\x07\xd5\xb6\xf3\x9b\xc7\xad\xd5\xfc\xc8\xb4\xa6\x93\xc6\xde\x8f\xb9\x0a\xa6\x7a\x82\x27\x69\x75\x00\x44\x32\xd5\x12\x2f\x9e\x42\x4e\xfc\x7c\x75\x58\x9b\x0e\x28\xac\xf7\x51\xae\xf5\x4c\x1e\x49\x25\xe0\x2a\x0e\x61\x53\xbc\xd6\xb4\x7a\x6f\xce\xdf\xa5\xc6\xbb\xd0\x34\xa3\x8c\x8e\xca\x93\xa3\x36\xa6\xec\x0d\xa5\xa5\xa3\xdd\xb9\x56\x9f\x52\xae\x15\xb7\x37\xd7\x08\xff\xcb\x21\xdb\xe3\x09\x9c\xee\x73\xb6\x88\x69\x3e\xce\x0e\x9c\x6c\x70\x92\xad\x7d\x58\x39\x1c\x72\x2b\xf2\x12\x40\xf6\x78\x83\x6b\x57\xe7\x9b\xf7\x07\x5b\x64\xf2\xd2\x69\x99\x28\xad\x5e\x37\xe3\x7a\xdb\x6b\x65\x90\xbf\xeb\xf5\x22\xcf\xf4\x5f\xe3\x91\xf7\x4e\x1b\x91\xa2\xad\x9c\xdd\xcf\xa3\x9f\x7f\x80\xc9\x39\x57\x9b\x97\xc2\xc5\xf7\x13\xc3\x9e\xda\x26\x54\x6d\x37\x57\xf2\x6b\x39\x69\xc3\xfb\xb6\x55\xdd\xc2\x6b\x3e\x6d\x5f\x1a\x9a\x1b\xce\xde\xde\x6b\xb7\x44\x77\x19\xc9\x2f\x32\x2b\xb2\xf3\x9a\xb5\xb2\x37\xbf\x1a\xb9\xc2\x68\xbd\xdb\x68\xed\x8c\xea\x17\xc0\xcc\x6a\x35\xd8\x6d\x95\x5f\x40\x77\x7a\x5c\xbf\x6f\xbb\xde\x65\xbb\xda\xdf\x6d\x9b\x5f\x72\x77\xfb\x7d\xdf\x76\xa7\xdf\xe2\x8e\xb8\x75\xd1\xdc\x3a\x09\x4a\xb8\x62\x0a\xc3\xbf\x81\x54\x7f\x9e\x20\x70\x08\xa4\xf2\xba\x75\x3a\x7c\xab\xf0\x6a\x9e\xfa\x95\xa6\xc4\xff\xd6\x56\x09\x12\xeb\xa1\x1c\xff\x55\x43\xf2\x7e\xc9\x2d\x1b\x5d\x75\x7a\xb5\x79\x79\xcf\xfe\x9c\xe3\xd9\x80\xfc\x9c\x75\x65\xd4\xb7\x30\xa8\xf4\xe4\xe6\xf7\x1c\x7c\x8e\xf9\x02\xaf\x18\xc7\x64\xa2\xe8\x2c\xe9\x52\xc5\xa8\xfd\xc1\x07\xa5\x6e\x95\xa7\xb3\xb9\xc9\x7f\xee\x79\x9d\x1b\x23\x53\xe2\xb4\xd1\xe1\x6f\x06\x9f\x17\x54\xcc\x71\xe9\x1e\xfd\x83\x4c\x23\x81\x6d\xed\x16\xfd\x8e\x45\x71\xd6\x27\xde\x51\x2f\xfb\xe5\xc4\xf3\xfe\x17\x00\x00\xff\xff\x12\x07\xba\xc7\xba\x15\x00\x00")

func assetsIndexHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtmlTmpl,
		"assets/index.html.tmpl",
	)
}

func assetsIndexHtmlTmpl() (*asset, error) {
	bytes, err := assetsIndexHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html.tmpl", size: 5562, mode: os.FileMode(420), modTime: time.Unix(1456854554, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html.tmpl": assetsIndexHtmlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html.tmpl": &bintree{assetsIndexHtmlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

