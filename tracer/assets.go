// Code generated by go-bindata.
// sources:
// assets/index.html.tmpl
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x58\xeb\x53\xe3\x38\x12\xff\xee\xbf\xa2\xd1\x55\xed\x3a\x77\x8e\x43\x98\x65\xeb\x8e\x00\x57\x2c\x8f\x5d\xae\x18\xa0\x20\xd4\x14\x45\xf1\x41\xd8\x4a\xac\x19\xc5\xca\x4a\x72\x1e\x37\xc5\xff\x7e\x2d\xf9\x81\x1d\x3b\xc3\xcc\x2d\x1f\x88\xdd\xea\x5f\xf7\xaf\x1f\x6a\x29\x39\xdc\x39\xbb\x39\x1d\x3f\xde\x9e\x43\x62\x66\xe2\xd8\x3b\xdc\xe9\xf7\x3d\x38\x95\xf3\xb5\xe2\xd3\xc4\x80\x1f\xf5\x60\x6f\x77\xf8\x2b\x8c\x15\xd7\x86\xa6\xb8\x24\xa6\xd4\xb0\xfe\xc7\xe8\x82\x2a\x41\x53\xe6\x79\x30\x4e\xb8\x86\x09\x17\x0c\xf0\x73\x4e\x95\x01\x39\x81\x85\x4c\xff\x0c\x71\xd1\x7e\x5a\xf9\x44\x31\x06\x5a\x4e\xcc\x92\x2a\x76\x00\x6b\x99\x41\x84\xf6\x14\x8b\xd1\xb0\xe2\x2f\x99\x41\xb8\x01\x9a\xc6\x03\xa9\x60\x26\x63\x3e\x59\x7b\x56\x92\xa5\x31\x53\x60\x12\x06\x86\xa9\x99\xb6\xb6\xed\xcb\xef\xd7\x0f\xf0\x3b\x4b\x99\xa2\x02\x6e\xb3\x17\xc1\x23\xb8\xe2\x11\x4b\x35\x03\x8a\x2c\xac\x44\x27\x2c\x86\x17\xb4\x62\xf5\x2f\xac\xff\xfb\xc2\x3f\x5c\x48\x34\x4b\x0d\x97\x69\x00\x8c\xe3\xba\x82\x05\x53\x1a\xdf\xe1\x43\xe9\xa1\x30\x17\x80\x54\x1e\xf8\xd4\x58\xce\x0a\xe4\xdc\xa2\x7a\x48\x74\x0d\x02\x33\x51\x01\xeb\xc1\xbe\xc5\x14\x03\x4f\x9d\xb5\x44\xce\x31\x82\x04\xcd\x60\x4c\x4b\x2e\x04\xbc\x30\xc8\x34\x9b\x64\x22\xf0\x00\x55\xe1\xd3\xe5\xf8\x8f\x9b\x87\x31\x9c\x5c\x3f\xc2\xa7\x93\xbb\xbb\x93\xeb\xf1\xe3\x08\x55\x4d\x22\x71\x95\x2d\x58\x6e\x88\xcf\xe6\x82\xa3\x5d\x8c\x43\xd1\xd4\xac\x91\xae\x07\x1f\xcf\xef\x4e\xff\x40\xc0\xc9\x6f\x97\x57\x97\xe3\x47\xa4\x0c\x17\x97\xe3\xeb\xf3\xfb\x7b\xb8\xb8\xb9\x83\x13\xb8\x3d\xb9\x1b\x5f\x9e\x3e\x5c\x9d\xdc\xc1\xed\xc3\xdd\xed\xcd\xfd\x79\x08\x70\xcf\x2c\x25\xe6\x7d\x2b\x99\x13\x57\x0d\x4c\x59\xcc\x0c\xe5\x42\xdb\x30\x1f\xb1\x78\x1a\x59\x89\x18\x12\xba\x60\x58\xc4\x88\xf1\x05\x72\xa2\x10\x61\xeb\xbc\x5f\x22\x0f\xa8\x90\xe9\xd4\x05\x97\x77\x0a\xc0\xe5\x04\x52\x69\x02\xd0\x48\xea\x30\x31\x66\x7e\x30\x18\x2c\x97\xcb\x70\x9a\x66\xa1\x54\xd3\x81\xc8\xa1\x7a\x70\x1c\x7a\xfd\xfe\xb1\xe7\x1d\xea\x48\xf1\xb9\x01\xad\xa2\x23\x62\x01\x1a\x11\x51\x9c\x7e\xd6\x61\x24\x64\x16\x4f\x04\x56\x3a\x8c\xe4\x6c\x40\x3f\xd3\x15\xe2\x5f\xf4\x20\xfe\x30\xf8\x10\xee\x87\xc3\x7d\x7c\x0a\x67\x3c\x0d\x3f\x6b\x72\x7c\x38\xc8\x2d\x1d\xff\x5f\x26\x67\x72\xc6\x52\x83\x86\x06\x7b\xe1\x70\x18\xee\x15\x82\xbe\x8d\xad\x2f\x64\x44\x05\xd3\x1d\xae\xd0\x97\x59\xe3\x96\x31\xeb\x39\x3b\x22\x86\xad\xcc\x20\xd2\xa8\xe1\x01\x84\x34\x32\x98\xce\x2b\x9e\x7e\x81\xaf\xf8\x0e\x80\xdd\x24\xbf\xe0\xae\xf9\xdb\xee\xee\xee\xa8\x26\x41\x27\xb1\x49\x0e\x60\x18\xee\xcf\x57\x76\xe1\xd5\xb3\x78\x9e\xfe\xb0\x85\xdd\x3a\x3e\x95\x31\xfb\x71\xcf\x18\x9b\x8d\xc8\x86\xf6\x22\xe3\xb5\x8d\xe4\xb0\x8c\x16\xdc\xdf\x82\x2a\x58\x6a\x38\x82\x94\x2d\xe1\x13\x7b\xb9\x97\xd1\x17\x66\x7c\xb2\xb4\x69\x76\xa9\x4a\xa4\x36\x07\xc3\xbd\x0f\xbf\xec\x0f\xb2\x39\x6e\x50\xa6\x49\x6f\xe4\xd5\xe1\xd6\x2d\x5a\xf8\xd7\xaf\xbb\x41\x21\xb6\x7f\x09\x73\xe3\xea\x08\xf6\x2d\xcd\x9a\x7e\xb4\xb7\x1b\xa1\x18\xab\xad\x6d\x25\xc2\x08\x6d\x4e\xa5\x5a\xa3\xd8\x6f\x5a\xb6\x41\x5b\x6e\x4f\xcf\x0d\xc3\x54\x4c\x6c\x1a\xdb\x2b\xa2\x92\xb6\xcd\x5c\xc6\x2b\x5c\xf9\xfa\x3a\x82\xc1\x00\x66\x74\xee\xa4\x70\x79\xa6\xc1\xc8\xc2\x11\xc7\xb1\xb6\xaa\xe1\x2a\x47\x2d\xac\x5d\x01\x16\x4f\x2b\x03\xf6\xb9\x6d\x40\x74\x82\xb7\xe1\x6a\x40\xdc\xe1\x11\xcb\x73\x24\x28\xce\x38\x13\x3a\x89\xdf\xab\x05\xeb\x5a\x42\xfb\xee\x7f\x43\xee\xbc\xfa\xee\x7f\x43\x1e\x25\x54\x4d\x99\xdf\xff\x65\x77\xb7\xa5\x7f\xe6\x8e\x12\xf4\x60\x5f\xee\x8d\x62\xe9\xd4\x24\xdf\xd6\xb2\x2f\x0d\x0d\xcd\xff\xcb\xfc\x27\xd7\x0d\x41\x51\xfd\xe7\x86\x82\x4c\x7d\x62\x78\xf4\x85\x04\xf6\x7f\xb3\xd4\x7a\x31\x2d\x7a\x82\x09\x16\x61\x03\xda\x7e\x25\xbd\x90\xce\xe7\x2c\x8d\x7d\x82\xeb\xa4\x61\x8c\x1a\xa3\xb0\x4d\xad\x37\x12\xe4\x3d\xd8\xb1\x9e\xd3\x20\x25\x9f\x76\x7b\xa1\x53\x34\x5d\x78\x3d\x11\xc2\x27\x2e\xaf\xa4\xb7\xd9\x57\x1d\x8a\x56\x5c\xdb\x0b\x93\x2c\x8d\xec\x41\x04\x65\x76\x7c\x11\x08\xde\xfb\x5a\x19\x52\xcc\x64\x0a\x97\x71\x5a\x69\x03\x7f\x87\xe1\x5e\xb1\xf4\xda\x69\xa2\x2c\xc3\xa6\x19\x3e\x01\x5f\x84\x78\x9e\xd1\x17\xc1\xe2\xda\x42\xe5\xa1\x18\x0b\xce\xf4\x68\xd3\xfd\x70\xb4\xd5\x2b\x56\x57\x19\xbf\x07\x6f\x26\x8b\xc8\xed\x47\x88\x7b\x9f\xfa\xae\x0f\x8b\x16\xeb\x05\x15\xd4\x8f\x11\x55\x7a\x88\x43\x8d\xc7\x32\xaa\xf1\x18\xfe\x01\xa4\x4f\xf0\x7f\x1c\x1a\xdb\x7d\x06\x65\x23\x78\xed\x8d\x1a\x1e\x42\x1c\xce\x4c\xf9\x3d\x9c\x92\x9a\x21\x03\x82\x42\x86\x45\x2b\x6b\xb1\xa9\xbd\xe2\xc8\x32\x54\x6c\x26\x17\xac\x36\x32\xa0\xac\xa8\xfd\xa8\xd3\xcd\x77\xca\x76\xba\xc8\xa9\x4e\xc9\xc1\x4b\x4a\x65\x03\x46\x5c\x45\x82\x75\xf5\x20\x5e\xb3\x04\xa9\xdb\x0e\x38\x5a\x2f\x8c\xdb\x61\x97\xef\xd1\x50\xe4\x9b\x0a\x5d\xb5\x6d\x44\x82\xe2\x49\x83\x11\xe7\x01\xb7\x15\x14\x2e\xfe\xb3\xc5\x71\x6b\x22\xf2\xb8\x8b\x7a\x6e\x2f\xb8\xb5\xf2\xe0\x86\xba\x6f\x74\xc0\xe3\x00\x11\x86\xd5\x1b\x20\x92\xa9\x96\x38\xa4\x85\x9c\xfa\x24\xcd\x70\xeb\xd6\xf4\x46\xb5\x9e\xf4\x77\xaa\x39\x1b\x26\x54\xdf\x2c\xd3\x5b\x85\xf7\x2b\x65\xd6\x3e\x8f\x7b\x8d\x2e\x15\xcc\x40\x6a\x67\x22\xe1\x31\x39\x00\x1e\xd7\x9a\x34\x8f\x4c\x87\xf3\x4c\x27\x7e\xda\x6b\x2d\xa0\xf9\x27\x1e\x3f\x17\x45\x2e\x93\x0a\xfd\xb7\xb6\x6e\xb3\xb6\x8a\x98\xbe\x7c\x52\x7e\x5b\x0d\xcd\x97\x9a\xf8\xd8\xeb\xd8\x47\xed\x24\xda\x19\xde\x48\xa2\x15\x5c\xd3\x19\x7b\x27\x9b\xac\xca\xe6\x06\xa0\xd6\xee\x98\x29\xe6\x84\x18\xf0\x7f\xee\x6f\xae\x43\xbc\xcb\x6b\xe6\x77\xa5\xbf\x3c\x6c\x36\xb3\x5f\x1a\x6f\xd6\xc0\x22\xaa\xf3\xed\xfb\x20\x45\xe1\xd8\x32\x61\xb5\x7d\xa6\x9f\xea\x75\x79\x1e\x75\x03\x5c\xb5\xf3\xa9\x80\x15\xaf\x6c\xbc\x36\xd5\x2b\x42\x4f\x25\x83\xe7\xfc\x66\x92\xb0\xa6\x62\x23\x8f\x89\xb0\xd5\xad\xb0\x8d\x0a\xbf\x02\x13\x9a\x41\x3b\x0c\x29\x62\xc7\xaa\xc3\x65\xd3\x95\x9d\xb6\x4e\xb9\x18\x6a\xb0\x73\x84\x1d\x0b\x3f\xfd\x04\x3b\xb9\x78\x23\x77\x24\x9f\x73\x64\x33\x77\x55\x32\xcc\xf7\x26\xaf\x28\xbf\x9d\x63\xcd\xea\x57\xe5\xe9\xd2\x47\x0f\xc5\xd0\xae\x25\xbc\x1e\x40\x50\x32\x3c\xa8\xd8\x04\xc4\x9e\x48\x28\x70\xce\xc2\x53\x7c\x09\x48\x79\xc0\x58\xb1\xeb\xb7\xf0\xcc\x4a\xf0\xc6\x16\xbf\xb6\x1c\xbb\x2e\xca\xf7\x6c\xee\xbf\xcd\xad\x68\xcf\x46\x69\x73\x5c\xf7\x1e\xfe\x66\x43\x58\x60\x53\xb9\xc1\xa9\xf6\xd2\xd1\x01\x36\x4d\xd4\xdd\xc2\x0a\x06\x4f\x6d\x72\x8d\x5a\x38\xe5\xa7\xb7\x8c\x58\x12\xf5\x9c\xa0\xac\x6b\x52\xb4\x6f\x06\xd6\xce\x47\xa6\x35\x9d\xb6\x66\x45\xcc\x55\x30\xd3\x53\x3c\xf4\xb7\x0d\x8c\x62\xb5\x39\x1d\x50\xd8\x6c\x8e\x42\xeb\x89\x3c\x90\x5a\x0c\xcd\xc1\x33\x6b\x0d\x9e\xc2\x7b\xfb\xa8\x58\x6a\xbc\xb6\xcd\x72\xca\xe8\xa8\x3a\xe4\x1a\x63\xcd\x5e\xa6\x3a\xda\xd4\x1d\xc1\xcd\x29\xe5\xfa\x6b\x73\xc7\x8c\xf1\xfb\x16\xd9\x1c\x4f\xe0\x74\x9f\xf2\x45\x4c\xf8\x51\x7e\x36\xe6\x83\x96\x6c\x6c\xae\xda\x39\x56\xa0\xc8\x73\x00\xf9\xe3\x35\xae\x5d\x9e\xbd\xbd\xdf\xdb\xba\x91\xe7\xae\x31\xd1\xe9\xf5\x6d\xbc\x6f\x7a\xad\x0d\xfe\x77\xbd\x9e\x17\x99\xfe\x6b\x3c\x8a\xde\xe9\x22\x52\xb6\x95\xc3\xfd\x3c\xfe\xf9\x07\x98\x9c\x71\xf5\xf6\x52\xba\xf8\x7e\x62\xd8\x53\x9b\x84\xea\xed\xe6\x4a\x7e\x25\xa7\xef\xcf\xe5\x4d\x54\x13\xe1\xb5\x9f\x36\xef\x37\xed\x0d\x67\xbf\x68\x34\x2e\xb4\xee\xde\x54\xdc\xb9\x56\x64\xeb\x8d\x70\x65\x2f\xa9\x0d\x72\x25\x68\xbd\x1d\xb4\x76\xa0\xe6\x5d\x35\x47\xad\x86\xdb\x51\xc5\x5d\x79\xab\xc7\xf5\xfb\xd8\xf5\x36\xec\x6a\x6f\x3b\xb6\xb8\x8f\x6f\xf7\xfb\x3e\x76\xab\xdf\xf2\x3a\xbb\x05\x5e\x0c\x52\xdb\x3d\xc3\x7f\x03\xa9\xff\x36\x42\xe0\x00\x48\xed\xb5\xfe\x65\xa1\xa3\xbe\x2a\x4b\xfd\x5a\xef\xe1\xf7\xc7\x55\x82\xfe\x07\x28\xc7\x2f\x8f\xc8\xd1\xaf\x28\xe4\x13\xaa\xd7\xe8\xb9\xc6\x58\xbc\x63\x7f\x66\x38\xd5\x59\x0c\x0e\x5d\x9b\xe8\x1d\x0c\x6a\xad\xf7\xf6\x03\x12\x3e\xc7\x7c\x81\xd7\x83\x23\x32\x55\x74\x9e\xf4\xa9\x62\xd4\xfe\xc2\x84\x52\xb7\xca\xd3\x79\x66\x8a\xdf\x97\x5e\x32\x63\x64\x4a\x9c\x36\x3a\xfc\xcd\xe0\xf3\x82\x8a\x0c\x97\xee\xd0\x3f\xc8\x34\x12\xd8\xbd\x6e\xd1\xef\x59\x2b\x0e\x7d\xec\x1d\x0e\xf2\xdf\x72\x3c\xef\x7f\x01\x00\x00\xff\xff\x6e\x53\x1a\x84\x2b\x16\x00\x00")

func assetsIndexHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtmlTmpl,
		"assets/index.html.tmpl",
	)
}

func assetsIndexHtmlTmpl() (*asset, error) {
	bytes, err := assetsIndexHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html.tmpl", size: 5675, mode: os.FileMode(420), modTime: time.Unix(1456851636, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html.tmpl": assetsIndexHtmlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html.tmpl": &bintree{assetsIndexHtmlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

