// Code generated by go-bindata.
// sources:
// assets/index.html.tmpl
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\x7b\x6f\xe3\x36\x12\xff\xdf\x9f\x62\x56\x05\x6a\xf9\x56\x96\x1f\xe9\x16\x3d\x3b\x49\x91\xdd\xec\xb6\x39\x64\x93\x20\x0f\x14\x8b\x20\x07\xd0\x12\x6d\xa9\x2b\x8b\x5a\x92\x8e\xad\x5b\xf8\xbb\xdf\x90\x94\x6c\x3d\x9d\xf4\x8a\xf3\x1f\xb6\x48\xce\xfc\xe6\xc9\xe1\x50\x3e\x7e\x73\x7e\xfd\xe1\xfe\xcb\xcd\x47\x08\xe4\x32\x3a\xed\x1c\xbf\xe9\xf7\x3b\xf0\x81\x25\x29\x0f\x17\x81\x04\xdb\xeb\xc1\x78\x38\xfa\x19\xee\x79\x28\x24\x89\x71\x29\x5a\x10\x49\xfb\x9f\xbd\x4f\x84\x47\x24\xa6\x9d\x0e\xdc\x07\xa1\x80\x79\x18\x51\xc0\xdf\x84\x70\x09\x6c\x0e\xcf\x2c\xfe\xe6\xe2\xa2\xfa\x55\xf3\x73\x4e\x29\x08\x36\x97\x6b\xc2\xe9\x04\x52\xb6\x02\x0f\xf1\x38\xf5\x11\x98\x87\xb3\x95\x44\x76\x09\x24\xf6\x07\x8c\xc3\x92\xf9\xe1\x3c\xed\xa8\x99\x55\xec\x53\x0e\x32\xa0\x20\x29\x5f\x0a\x85\xad\x06\xbf\x5d\x3d\xc0\x6f\x34\xa6\x9c\x44\x70\xb3\x9a\x45\xa1\x07\x97\xa1\x47\x63\x41\x81\xa0\x16\x6a\x46\x04\xd4\x87\x19\xa2\x28\xfa\x4f\x4a\xfe\x5d\x26\x1f\x3e\x31\x84\x25\x32\x64\xb1\x03\x34\xc4\x75\x0e\xcf\x94\x0b\x1c\xc3\x51\x2e\x21\x83\x73\x80\xf1\x0e\xd8\x44\x2a\x9d\x39\xb0\x44\x71\xf5\x50\xd1\x14\x22\xf4\xc4\x8e\xb1\x68\xec\xde\x26\x1f\xc2\x58\xa3\x05\x2c\x41\x0b\x02\x84\x41\x9b\xd6\x61\x14\xc1\x8c\xc2\x4a\xd0\xf9\x2a\x72\x3a\x80\xa4\xf0\xc7\xc5\xfd\xef\xd7\x0f\xf7\x70\x76\xf5\x05\xfe\x38\xbb\xbd\x3d\xbb\xba\xff\x32\x45\x52\x19\x30\x5c\xa5\xcf\xd4\x00\x85\xcb\x24\x0a\x11\x17\xed\xe0\x24\x96\x29\xaa\xdb\x81\xcf\x1f\x6f\x3f\xfc\x8e\x0c\x67\xef\x2f\x2e\x2f\xee\xbf\xa0\xca\xf0\xe9\xe2\xfe\xea\xe3\xdd\x1d\x7c\xba\xbe\x85\x33\xb8\x39\xbb\xbd\xbf\xf8\xf0\x70\x79\x76\x0b\x37\x0f\xb7\x37\xd7\x77\x1f\x5d\x80\x3b\xaa\x54\xa2\x9d\x43\xce\x9c\xeb\x68\xa0\xcb\x7c\x2a\x49\x18\x09\x65\xe6\x17\x0c\x9e\x40\xad\x22\x1f\x02\xf2\x4c\x31\x88\x1e\x0d\x9f\x51\x27\x02\x1e\xa6\xce\xcb\x21\xea\x00\x89\x58\xbc\xd0\xc6\x99\x4c\x01\xb8\x98\x43\xcc\xa4\x03\x02\x95\x3a\x0e\xa4\x4c\x26\x83\xc1\x7a\xbd\x76\x17\xf1\xca\x65\x7c\x31\x88\x0c\xab\x18\x9c\xba\x9d\x7e\xff\xb4\xd3\x39\x16\x1e\x0f\x13\x09\x82\x7b\x27\x96\x62\x10\xc8\xe1\xf9\xf1\x9f\xc2\xf5\x22\xb6\xf2\xe7\x11\x46\xda\xf5\xd8\x72\x40\xfe\x24\x1b\xe4\x9f\x89\x81\x7f\x34\x38\x72\xdf\xb9\xa3\x77\xf8\xe4\x2e\xc3\xd8\xfd\x53\x58\xa7\xc7\x03\x83\x74\xfa\x3f\x41\x2e\xd9\x92\xc6\x12\x81\x06\x63\x77\x34\x72\xc7\xd9\x44\x5f\xd9\xd6\x8f\x98\x47\x22\x2a\x1a\x44\xa1\x2c\x99\xe2\x96\x91\x69\x42\x4f\x2c\x49\x37\x72\xe0\x09\xa4\xe8\x00\xb8\xc4\x93\xe8\xce\xcb\x30\xfe\x0a\xdf\x71\x0c\x80\xd9\xc4\xbe\xe2\xae\xf9\x61\x38\x1c\x4e\x0b\x33\x28\xc4\x97\xc1\x04\x46\xee\xbb\x64\xa3\x16\xb6\x1d\xc5\x1f\xc6\xed\x08\x84\x90\x26\x84\x61\x8e\xb0\x5b\xf0\x89\x08\x54\x8a\xa5\x13\xb0\x46\x43\x67\x34\xb4\xf6\x02\x62\xe6\xd3\xbf\xae\x1a\x1a\xaf\x4c\x56\xb6\xcf\x98\x9f\x2a\x53\x8f\x73\x77\x80\xfe\x3c\x13\x0e\x6b\x01\x27\x10\xd3\x35\xfc\x41\x67\x77\xcc\xfb\x4a\xa5\x6d\xad\x55\x1c\xb4\x2f\x03\x26\xe4\x64\x34\x3e\xfa\xe9\xdd\x60\x95\xe0\x0e\xa6\xc2\xea\x4d\x3b\x45\x76\x25\x16\x11\xfe\xf9\xf3\xd0\xc9\xa6\xd5\x27\xa0\xba\x9e\x9d\xc0\x3b\xa5\x66\x81\xde\x1b\x0f\x3d\x9c\xc6\x74\x10\x2a\x54\xae\x87\x98\x0b\xc6\x53\x9c\xb6\xcb\xc8\xca\x68\xa5\xdb\xe3\x53\x09\x98\x44\x73\xe5\xe7\xfa\x4a\xb4\x9b\xad\xc3\x5c\xf8\x1b\x5c\xf9\xbe\x9d\xc2\x60\x00\x4b\x92\xe8\x59\xb8\x38\x17\x20\x59\x26\x28\xc4\xba\xb7\x29\xf0\xed\x04\xd5\x78\xd5\x0a\x50\x7f\xb1\x03\x50\xcf\x75\x80\xa8\x91\xb9\x8d\xaf\xc0\x88\x25\xc0\xa3\xc6\x47\x11\xc1\x22\x28\x5d\x3d\x63\xf7\x0a\xc6\xea\x94\x10\xb6\xfe\x2e\xcd\x6b\xa9\xb6\xfe\x2e\xcd\x7b\x98\x5c\x0b\x6a\xf7\x7f\x1a\x0e\x6b\xf4\x77\x92\xd3\x78\x21\x03\xbb\x38\xa8\x51\x9d\xeb\x13\x09\xf5\xc8\x07\x25\x0a\x11\xfe\x87\xda\x8f\x3a\x1b\x9c\x2c\xfa\x4f\x25\x02\x16\xdb\x96\x0c\xbd\xaf\x96\xa3\xbe\xcb\xa1\x16\xcf\x8b\x2c\x27\x68\x44\x3d\x4c\x40\x95\xaf\x56\xcf\x25\x49\x42\x63\xdf\xb6\x70\xdd\x2a\x81\x11\x29\x39\xa6\xa9\x92\x66\x39\x26\x07\x1b\xd6\x8d\x1a\x56\xae\x4f\x3d\xbd\x50\x28\x42\x67\x52\xcf\xa2\xc8\xb6\xb4\x5f\xad\x5e\x35\xaf\xea\x84\x38\xdb\x40\x77\x43\xf4\x66\xa8\x82\xe6\x4b\x75\x86\x4b\x32\xa3\x51\x0b\x87\x5e\x2b\x6c\xb7\xf9\x2a\xf6\xd4\x61\x08\x79\x00\xec\xc8\x89\xc2\xde\xf7\x1d\x24\xa7\x72\xc5\x71\x19\x2b\xa6\x90\xf0\x0f\x18\xff\x94\x2d\x6d\x1b\x21\xf6\x61\x2f\xc3\x84\x73\xb0\x23\x17\xcf\x54\x32\x8b\xa8\x5f\x58\xd8\x49\xc8\x2a\x8f\x86\x9e\x56\xc5\x8f\xa6\xad\x52\xfd\x3c\x85\x92\x91\x93\x8c\x7b\xb0\x87\x56\x11\xd9\x8c\xd0\x11\xc9\xc8\xdd\xc0\x31\x24\x63\xfc\xf9\xd5\x8c\x26\x7a\x34\x2d\xd3\x8e\xeb\xb4\x63\x43\x3b\xaa\xd2\xa6\x19\x6e\x6a\x68\x53\x83\x9b\x1a\xdc\xb4\x42\x3b\xae\xd3\x8e\x0d\xed\xa8\x48\x9b\xd9\x0a\x9f\x31\xaa\xae\xf8\xc6\xa5\x6d\x2b\x9d\xfa\xca\x88\xde\xbf\xc7\xf0\x16\x6c\x85\xd5\x47\xe1\x38\xec\xb5\xbb\x04\x1d\x82\xcc\x45\x57\x64\xf9\xa6\x7e\x5c\xac\xb8\x24\xdb\xcc\xd3\x12\x81\x8b\x47\x1e\xe5\xf6\x7e\x8b\x98\x7c\x2c\x84\x6a\xff\xc9\x76\x43\xe8\x5b\x4e\x2e\xd6\xf6\x9d\x10\x65\x66\x56\x74\x15\x62\xf7\x6d\xb8\xad\x09\xd9\x84\xa8\x9b\xcb\xe9\x92\x3d\xd3\x42\x79\x2e\x25\x7b\xfe\xd8\xae\xac\x5e\xad\x28\xdc\x4d\x70\xb2\x5b\x57\xd8\x28\xfb\xbd\xeb\x77\x27\xb0\xd7\xb6\xa0\xeb\x67\xe8\xbe\xf5\x5d\x81\xbd\xa1\x47\xdd\xcd\xdb\x6e\x71\x98\xe2\xf0\x12\x27\xc0\x77\xa5\x2a\x77\x12\x33\x22\xa3\xc8\xc6\xe9\xd6\x69\xf4\x11\x7e\xba\x5e\x44\x84\xe8\x4e\xba\xb9\xca\xdd\x76\x52\xec\xbe\xa3\x3e\x4b\x88\x17\xca\xb4\x3b\x19\xb6\x13\x66\x87\xf3\x6b\x48\x15\x26\x4a\x9f\x45\x2b\x7a\x40\xb2\x01\x44\x3a\xec\xe4\x0f\x90\x85\xe8\xbf\x03\xc1\xd6\xe6\x61\xc0\xb7\x0d\x01\xd0\x4d\x83\x6d\x25\x2c\x54\x11\xeb\xab\x46\x58\x0a\x2c\xa2\x56\xcc\x54\x8a\x55\x92\x20\x2f\x60\xbb\xe7\xf6\x34\x30\xcb\xd5\x3c\x50\xad\x58\x43\x1e\xbc\x5a\x9f\x03\x9c\x59\x2a\x15\xe3\xaa\x75\x68\xf7\xdb\x01\x07\x96\xfc\x67\x60\xd0\x81\x2f\x23\x0d\x06\x5d\x7f\xd3\x82\xb5\xab\x87\x79\x06\x3b\x79\xa2\xf6\x06\xe3\x57\x60\x6b\x64\x38\x6a\x4f\xaa\x02\xe5\xc1\xe4\xdb\xd3\xcd\x19\xf6\xd2\xea\x30\xef\x4e\x46\xaf\xa2\x37\x59\xab\xfa\xdc\x6e\x43\x36\xed\x3e\xa5\x78\xdf\x34\xef\xfd\x02\xb1\x8a\x5c\x77\xa3\x5c\x3d\x09\x38\x9d\x77\xdb\x2a\xd7\x0f\xc5\x6c\xfe\xff\x64\x91\x52\xd8\x6e\x0e\x9f\x3e\x68\xb7\xc5\x2d\x91\x75\x15\xea\xc7\x6c\x04\xd3\xa1\x4d\x4b\x04\xb5\xe2\xed\x85\xdc\x8b\x5e\x28\xdf\xca\xd1\xa8\x6f\xb3\x1f\x54\x57\x6d\x44\xb9\x91\xe9\xde\xa6\x2d\xde\xc8\xd0\xf4\x9e\x30\xe6\xfb\x2f\x08\xe6\x48\xf6\x4b\xcd\x82\xd6\x93\x41\xf7\xaa\x6e\x76\xac\xb5\x9f\x7b\x0a\xe5\x41\xdf\x28\x6c\x29\x9c\xd0\x77\x90\x43\xd2\xe2\x39\x18\xce\xed\x37\xbb\xee\xdd\x0d\x88\xb8\x5e\xc7\x37\x1c\xaf\xf5\x5c\xa6\x76\xe8\xf7\x4a\x8d\x89\xee\xe8\x54\xa7\xad\x8e\xb9\x09\x84\x7e\xa1\x2f\x31\x2a\x0b\x37\x59\x89\xc0\x8e\x7b\xb5\x05\x84\x7f\x0c\xfd\xa7\x2c\x6c\xb9\x07\xf1\xec\x1e\x35\xb4\x39\x75\x4b\x54\x17\x5f\xb2\x44\x4d\x5c\x91\x25\xad\x9b\xa4\xb4\xa4\x7a\x16\x85\xfd\xeb\xee\xfa\xca\x4d\x08\x17\xd4\x36\x84\xd3\x92\xe9\xf9\xf5\xa1\x6a\x79\x8e\x5e\xb6\x5f\x71\xec\x6e\x2c\xaf\x63\xc9\x9c\x46\xd7\x01\x2d\x64\xad\x78\x2c\xfa\xe4\x69\xda\xcc\xa0\x3d\x6d\x4a\x16\x7a\x7b\x87\xb1\x2d\x93\xef\x14\x7a\xcc\x35\x78\x32\x77\xcd\x80\x16\x09\xb7\x40\x23\x41\xa1\xae\x1b\x8b\x7c\x2d\xaa\x01\xa7\x2c\x48\x75\xac\x9a\x38\x2b\xa3\xf0\xe6\x04\x53\x00\x7e\xfc\x11\xde\x98\xe9\x8a\x43\x2c\x53\x64\xad\xaa\x43\x76\x16\xca\xd7\x7a\x24\x8b\xa9\xda\xea\xe5\x90\xee\x7c\xde\x44\x8f\x12\xb2\x2e\xaf\xe0\xc5\xa2\x01\x4e\xae\xe1\x64\xa7\x8d\x63\xa9\x62\x83\x13\x5a\x98\xfb\x01\x07\x8e\x95\x37\xe9\x6a\x5a\x27\x91\x7b\x9e\xcd\x6c\xab\x72\x75\x3e\x65\x7b\xc0\x88\xaf\xa9\x96\xa7\x5c\x29\x5c\x86\xaf\x69\x4f\xbc\x10\x64\xc5\x58\x26\x2e\xe9\x54\x18\x34\x24\x80\xf2\x12\xd1\x77\xe5\x13\xad\xc0\x63\x5d\xb7\x52\x24\x34\xed\xe3\xde\x1f\x4a\x87\x8a\x47\xa6\xd5\x77\x05\x4d\x98\xc8\xa6\xa1\x9a\x76\x7e\xfd\x22\xa6\x28\x3f\x53\x21\xc8\xa2\xb6\xf7\xfd\x90\x3b\x4b\xb1\xc0\x3b\x56\xb1\x00\x78\x2c\x16\x2c\xa2\x6e\xc4\x16\x76\xb6\x5a\xbe\x7f\xe0\x64\x39\x8f\x32\xaa\x47\xeb\xc1\x2a\x18\x5c\xc4\xb1\xe8\x12\xef\xd4\x8d\xd2\xeb\xf5\x77\x2d\xf0\x22\xbe\x34\x2a\xa3\xa0\xdd\x69\x52\x2b\x53\x0d\x19\xad\x0f\xb4\x72\x95\xd2\xa9\x58\xdd\x5c\xf7\x69\x42\xad\x6a\x79\x02\x4d\xfb\x68\x16\xd1\xcd\x27\xe6\xe8\x31\x85\xd3\xaa\xec\xc3\xc2\xe1\x90\x71\x59\x4f\x0e\x98\xc7\x2b\x5c\xbb\x38\xdf\x8f\xef\x54\x90\xad\xa7\x5e\x43\x45\x69\x94\xba\x2f\xd7\x55\xa9\x85\x42\xfe\xa2\xd4\x8f\x99\xa7\xff\x9e\x1e\x59\xee\x34\x29\x92\xa7\x95\xe6\xeb\xde\x77\xff\x82\x26\xe7\x21\xdf\x0f\x72\x11\xaf\x57\x0c\x73\xaa\xaa\x50\x31\xdd\x74\xc8\x2f\xd9\xa2\x09\xef\x30\x57\x99\xa3\x53\x7f\xaa\x36\x0d\xf5\x0d\xa7\x5e\x1d\x95\x2e\xcb\xba\x19\xc9\x5a\x9a\x4d\xa9\x3d\x42\x2a\xd8\xf5\x69\x9b\x29\x54\xfa\xa1\x9c\x29\x6d\x67\x4a\x35\x53\xf9\x46\x6c\xb8\x36\xa3\x76\xae\xfc\x66\xda\x26\x31\x7d\x99\x37\x6d\xe3\xdd\x8c\xdb\x79\xf3\x0b\x6f\xab\xdc\x97\x79\x5b\xe5\xe6\xdd\x62\xa5\xf9\xac\x9c\x04\x3b\xb8\xbc\x0a\xc3\xaf\x60\x15\xdf\x8d\x5b\x30\x01\xab\x30\xac\x9c\x0e\x4d\xef\x17\xb2\x9b\x00\x5e\x75\x2b\xba\xab\x1a\xa5\x5e\x21\x9c\xfc\xdd\x17\x02\xd5\xf3\xec\xd5\x9f\xcc\x5c\xa5\x44\x4d\x75\x73\xd5\x35\xba\x4b\x4e\x62\x81\x5d\xf1\xb2\x72\x89\xf9\x5e\x6b\x61\xf6\x4a\x1e\xef\x0d\xaa\xb5\x28\x00\xb3\x19\x53\x6f\x95\x65\x10\x0a\x17\xc9\xdf\xbf\x67\x1b\xbb\x76\x98\xa3\x82\x8a\x48\xd1\xa2\x57\xf4\x8f\x7e\x4f\x3a\x18\x37\x50\xa6\x39\x65\x6a\x28\xcd\x0b\xd3\x46\xd2\xec\xe2\xc5\x99\xaa\x77\xf6\xe8\x97\x21\x7a\x93\x1b\xb7\x73\x74\x77\xaf\x5b\xe7\xd9\x96\xab\x5b\xbd\x52\x34\x00\x0f\x0f\x03\x6d\x0f\x55\x09\xbe\x8a\xed\x82\xdb\xfc\x23\x77\x13\x60\x16\x0f\x70\xde\xea\x29\x8f\xed\xaf\x73\xe6\x9c\x2b\xe7\x72\xe9\x70\xbd\xa5\xdf\x56\xd8\x48\x60\x32\x6b\xee\xe9\x41\x0d\x0a\x05\x6c\xff\xcf\x13\x3e\xfb\xe1\x33\xf6\xa3\x27\xd6\x82\x93\x24\xe8\x13\x4e\x89\xfa\x6b\x0a\x67\xf5\x6a\x18\x27\x2b\x99\xfd\x31\x35\x5b\x49\xc9\x62\x4b\x53\xa3\xc0\xf7\x12\x9f\x9f\x49\xb4\xc2\xa5\x5b\x94\x0f\x2c\xf6\x22\xac\x81\x7a\xd1\xee\x29\x14\xcd\x7d\xda\x39\x1e\x98\xff\x78\x3a\x9d\xff\x06\x00\x00\xff\xff\x10\xc5\x09\x8e\x64\x1e\x00\x00")

func assetsIndexHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtmlTmpl,
		"assets/index.html.tmpl",
	)
}

func assetsIndexHtmlTmpl() (*asset, error) {
	bytes, err := assetsIndexHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html.tmpl", size: 7780, mode: os.FileMode(420), modTime: time.Unix(1456935677, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html.tmpl": assetsIndexHtmlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html.tmpl": &bintree{assetsIndexHtmlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

