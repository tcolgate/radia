// Code generated by go-bindata.
// sources:
// assets/index.html.tmpl
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\x7b\x6f\xe3\x36\x12\xff\xdf\x9f\x62\x56\x05\x2a\xf9\x56\x96\x1f\xe9\x16\x3d\x3b\x49\x91\xdd\xec\xb6\x39\x64\x93\x20\x0f\x14\x8b\x20\x07\xd0\x12\x6d\xa9\x2b\x8b\x5a\x92\x4e\xac\x5b\xf8\xbb\xdf\x90\x94\x6c\x3d\x93\xf4\x8a\xf3\x1f\xb6\x48\xce\xfc\xe6\xc9\xe1\x50\x3e\x7c\x73\x7a\xf9\xe1\xf6\xcb\xd5\x47\x08\xe5\x2a\x3e\xee\x1d\xbe\x19\x0c\x7a\xf0\x81\xa5\x19\x8f\x96\xa1\x04\xc7\xef\xc3\x64\x34\xfe\x19\x6e\x79\x24\x24\x49\x70\x29\x5e\x12\x49\x07\x9f\xfd\x4f\x84\xc7\x24\xa1\xbd\x1e\xdc\x86\x91\x80\x45\x14\x53\xc0\xdf\x94\x70\x09\x6c\x01\x8f\x2c\xf9\xe6\xe1\xa2\xfa\x55\xf3\x0b\x4e\x29\x08\xb6\x90\x4f\x84\xd3\x29\x64\x6c\x0d\x3e\xe2\x71\x1a\x20\x30\x8f\xe6\x6b\x89\xec\x12\x48\x12\x0c\x19\x87\x15\x0b\xa2\x45\xd6\x53\x33\xeb\x24\xa0\x1c\x64\x48\x41\x52\xbe\x12\x0a\x5b\x0d\x7e\xbb\xb8\x83\xdf\x68\x42\x39\x89\xe1\x6a\x3d\x8f\x23\x1f\xce\x23\x9f\x26\x82\x02\x41\x2d\xd4\x8c\x08\x69\x00\x73\x44\x51\xf4\x9f\x94\xfc\x9b\x5c\x3e\x7c\x62\x08\x4b\x64\xc4\x12\x17\x68\x84\xeb\x1c\x1e\x29\x17\x38\x86\x83\x42\x42\x0e\xe7\x02\xe3\x3d\x70\x88\x54\x3a\x73\x60\xa9\xe2\xea\xa3\xa2\x19\xc4\xe8\x89\x1d\x63\xd9\xd8\xbd\x4d\x01\x44\x89\x46\x0b\x59\x8a\x16\x84\x08\x83\x36\x3d\x45\x71\x0c\x73\x0a\x6b\x41\x17\xeb\xd8\xed\x01\x92\xc2\x1f\x67\xb7\xbf\x5f\xde\xdd\xc2\xc9\xc5\x17\xf8\xe3\xe4\xfa\xfa\xe4\xe2\xf6\xcb\x0c\x49\x65\xc8\x70\x95\x3e\x52\x03\x14\xad\xd2\x38\x42\x5c\xb4\x83\x93\x44\x66\xa8\x6e\x0f\x3e\x7f\xbc\xfe\xf0\x3b\x32\x9c\xbc\x3f\x3b\x3f\xbb\xfd\x82\x2a\xc3\xa7\xb3\xdb\x8b\x8f\x37\x37\xf0\xe9\xf2\x1a\x4e\xe0\xea\xe4\xfa\xf6\xec\xc3\xdd\xf9\xc9\x35\x5c\xdd\x5d\x5f\x5d\xde\x7c\xf4\x00\x6e\xa8\x52\x89\xf6\x9e\x73\xe6\x42\x47\x03\x5d\x16\x50\x49\xa2\x58\x28\x33\xbf\x60\xf0\x04\x6a\x15\x07\x10\x92\x47\x8a\x41\xf4\x69\xf4\x88\x3a\x11\xf0\x31\x75\x5e\x0e\x51\x0f\x48\xcc\x92\xa5\x36\xce\x64\x0a\xc0\xd9\x02\x12\x26\x5d\x10\xa8\xd4\x61\x28\x65\x3a\x1d\x0e\x9f\x9e\x9e\xbc\x65\xb2\xf6\x18\x5f\x0e\x63\xc3\x2a\x86\xc7\x5e\x6f\x30\x38\xee\xf5\x0e\x85\xcf\xa3\x54\x82\xe0\xfe\x91\xa5\x18\x04\x72\xf8\x41\xf2\xa7\xf0\xfc\x98\xad\x83\x45\x8c\x91\xf6\x7c\xb6\x1a\x92\x3f\xc9\x06\xf9\xe7\x62\x18\x1c\x0c\x0f\xbc\x77\xde\xf8\x1d\x3e\x79\xab\x28\xf1\xfe\x14\xd6\xf1\xe1\xd0\x20\x1d\xff\x4f\x90\x2b\xb6\xa2\x89\x44\xa0\xe1\xc4\x1b\x8f\xbd\x49\x3e\x31\x50\xb6\x0d\x62\xe6\x93\x98\x8a\x16\x51\x28\x4b\x66\xb8\x65\x64\x96\xd2\x23\x4b\xd2\x8d\x1c\xfa\x02\x29\x7a\x00\x1e\xf1\x25\xba\xf3\x3c\x4a\xbe\xc2\x77\x1c\x03\x60\x36\xb1\xaf\xb8\x6b\x7e\x18\x8d\x46\xb3\xd2\x0c\x0a\x09\x64\x38\x85\xb1\xf7\x2e\xdd\xa8\x85\x6d\x4f\xf1\x47\x49\x37\x02\x21\xa4\x0d\x61\x54\x20\xec\x16\x02\x22\x42\x95\x62\xd9\x14\xac\xf1\xc8\x1d\x8f\xac\xbd\x80\x84\x05\xf4\xaf\xab\x86\xc6\x2b\x93\x95\xed\x73\x16\x64\xca\xd4\xc3\xc2\x1d\xa0\x3f\x8f\x84\xc3\x93\x80\x23\x48\xe8\x13\xfc\x41\xe7\x37\xcc\xff\x4a\xa5\x63\x3d\xa9\x38\x68\x5f\x86\x4c\xc8\xe9\x78\x72\xf0\xd3\xbb\xe1\x3a\xc5\x1d\x4c\x85\xd5\x9f\xf5\xca\xec\x4a\x2c\x22\xfc\xf3\xe7\x91\x9b\x4f\xab\x4f\x48\x75\x3d\x3b\x82\x77\x4a\xcd\x12\xbd\x3f\x19\xf9\x38\x8d\xe9\x20\x54\xa8\x3c\x1f\x31\x97\x8c\x67\x38\xed\xf4\x67\x25\xc2\xc5\x4a\x2e\x0c\x21\x6e\x89\x15\x91\x8e\xbd\xf0\x26\x76\x55\xb8\xf2\x8b\x52\xff\xfe\xa1\x22\x9b\xc4\x0b\x15\x8a\xe6\x4a\xbc\x9b\x6d\xc2\x9c\x05\x1b\x5c\xf9\xbe\x9d\xc1\x70\x08\x2b\x92\xea\x59\x38\x3b\x15\x20\x59\x2e\x28\xc2\xd2\xb8\x29\xf1\xed\x04\x35\x78\xd5\x0a\xd0\x60\xb9\x03\x50\xcf\x4d\x80\xb8\x95\xb9\x8b\xaf\xec\x1c\xc6\x7d\x6a\xbc\x13\x13\xac\x93\xd2\xd3\x33\x4e\xbf\x64\xac\xce\x1a\xe1\xe8\xef\xca\xbc\x96\xea\xe8\xef\xca\xbc\x8f\xf9\xb7\xa4\xce\xe0\xa7\xd1\xa8\x41\x7f\x23\x39\x4d\x96\x32\x74\xca\x83\x06\xd5\xa9\x3e\xb4\x50\x8f\x62\x50\xa1\x10\xd1\x7f\xa8\x73\xaf\x13\xc6\xcd\x13\xe4\xa1\x42\xc0\x12\xc7\x92\x91\xff\xd5\x72\xd5\x77\x35\xd4\xe2\x71\x99\xa7\x0d\x8d\xa9\x8f\x39\xaa\x52\xda\xea\x7b\x24\x4d\x69\x12\x38\x16\xae\x5b\x15\x30\x22\x25\xc7\x4c\x56\xd2\x2c\xd7\xa4\x69\xcb\xba\x51\xc3\x2a\xf4\x69\xa6\x17\x0a\x45\xe8\x5c\xea\x49\x1c\x3b\x96\xf6\xab\xd5\xaf\xe7\x55\x93\x10\x67\x5b\xe8\xae\x88\xde\x2f\x75\xd0\x62\xa9\xc9\x70\x4e\xe6\x34\xee\xe0\xd0\x6b\xa5\x1d\xb9\x58\x27\xbe\x3a\x2f\xa1\x08\x80\x13\xbb\x71\xd4\xff\xbe\x83\xe4\x54\xae\x39\x2e\x63\x51\x15\x12\xfe\x01\x93\x9f\xf2\xa5\x6d\x2b\xc4\x3e\xec\x55\x98\x68\x01\x4e\xec\xe1\xb1\x4b\xe6\x31\x0d\x4a\x0b\x3b\x09\xa3\xd9\x6e\x6e\x3b\xab\x8b\x1f\xcf\x3a\xa5\x06\x45\x0a\xa5\x63\x37\x9d\xf4\x61\x0f\xad\x22\xb2\x19\xa3\x23\xd2\xb1\xb7\x81\x43\x48\x27\xf8\xf3\xab\x19\x4d\xf5\x68\x56\xa5\x9d\x34\x69\x27\x86\x76\x5c\xa7\xcd\x72\xdc\xcc\xd0\x66\x06\x37\x33\xb8\x59\x8d\x76\xd2\xa4\x9d\x18\xda\x71\x99\x36\xb7\x15\x3e\x63\x54\x3d\xf1\x8d\x4b\xc7\x51\x3a\x0d\x94\x11\xfd\x7f\x4f\xe0\x2d\x38\x0a\x6b\x80\xc2\x71\xd8\xef\x76\x09\x3a\x04\x99\xcb\xae\xc8\xf3\x4d\xfd\x78\x58\x94\x49\xbe\x99\x67\x15\x02\x0f\x4f\x45\xca\x9d\xfd\x16\x31\xf9\x58\x0a\xd5\xfe\x93\xef\x86\x28\xb0\xdc\x42\xac\x13\xb8\x11\xca\xcc\xad\xb0\x15\xa2\xfd\x36\xda\x36\x84\x6c\x22\xd4\xcd\xe3\x74\xc5\x1e\xa9\xb3\xcf\xc4\x4a\xb2\x17\x8f\xdd\xca\xea\xd5\x9a\xc2\x76\x8a\x93\x76\x53\x61\xa3\xec\x77\x3b\xb0\xa7\xb0\xd7\xb6\xa4\xeb\x67\xb0\xdf\x06\x9e\xc0\xf6\xd1\xa7\xde\xe6\xad\x5d\x1e\x66\x38\x3c\xc7\x09\x08\x3c\xa9\xca\x9d\xc4\x8c\xc8\x29\xf2\x71\xb6\x75\x5b\x7d\x84\x1f\xdb\x8f\x89\x10\xf6\xd4\x2e\x54\xb6\xbb\x49\xb1\x41\x8f\x07\x2c\x25\x7e\x24\x33\x7b\x3a\xea\x26\xcc\xcf\xef\xd7\x90\x2a\x4c\x94\x3e\x8f\xd7\xf4\x19\xc9\x06\x10\xe9\xb0\xd9\x7f\x86\x2c\x42\xff\x3d\x13\x6c\x6d\x1e\x06\x7c\xdb\x12\x00\xdd\x57\x38\x56\xca\x22\x15\xb1\x81\xea\x95\xa5\xc0\x22\x6a\x25\x4c\xa5\x58\x2d\x09\x8a\x02\xb6\x7b\xee\x4e\x03\xb3\x5c\xcf\x03\xd5\xad\xb5\xe4\xc1\xab\xf5\x79\x86\x33\x4f\xa5\x72\x5c\xb5\x0e\xdd\x7e\x7b\xc6\x81\x15\xff\x19\x18\x74\xe0\xcb\x48\xc3\xa1\x1d\x6c\x3a\xb0\x76\xf5\xb0\xc8\x60\xb7\x48\xd4\xfe\x70\xf2\x0a\x6c\x8d\x0c\x07\xdd\x49\x55\xa2\x7c\x36\xf9\xf6\x74\x0b\x86\xed\xb6\x3a\xcc\xed\xe9\xf8\x55\xf4\x26\x6b\x55\x2b\x6c\xb7\x64\xd3\xee\x53\x89\xf7\x55\xfb\xde\x2f\x11\xab\xc8\xd9\x1b\xe5\xea\x69\xc8\xe9\xc2\xee\xaa\x5c\x3f\x94\xb3\xf9\xff\x93\x45\x4a\x61\xa7\x35\x7c\xaa\x8b\xc5\xd0\xa9\xd3\xb6\xbf\x2d\x6f\x8c\xbc\xb7\x50\x3f\x66\x3b\x98\x3e\x6d\x56\x21\x68\x94\x70\x3f\xe2\x7e\xfc\x42\x11\x57\xee\x46\xad\xdb\xbd\xa1\xda\x6f\x23\xca\x8b\x4d\x0f\x37\xeb\xf0\x49\x8e\xa6\x77\x86\x71\x42\xf0\x82\x60\x8e\x64\xbf\x34\x2c\xe8\x3c\x1f\x74\xc7\xea\xe5\x87\x5b\xf7\xe9\xa7\x50\xee\xf4\xd5\xc3\x91\xc2\x8d\x02\x17\x39\x24\x2d\x9f\x86\xd1\xc2\x79\xb3\xeb\xe1\xbd\x90\x88\xcb\xa7\xe4\x8a\xe3\xfd\x9f\xcb\xcc\x89\x82\x7e\xa5\x3d\xd1\x7d\x9d\xea\xb7\xd5\x61\x37\x85\x28\x28\x75\x27\x46\x65\xe1\xa5\x6b\x11\x3a\x49\xbf\xb1\x80\xf0\xf7\x51\xf0\x90\x87\xad\xf0\x20\x9e\xe0\xe3\x96\x66\xa7\x69\x89\xea\xe5\x2b\x96\xa8\x89\x0b\xb2\xa2\x4d\x93\x94\x96\x54\xcf\xa2\xb0\x7f\xdd\x5c\x5e\x78\x29\xe1\x82\x3a\x86\x70\x56\x31\xbd\xb8\x44\xd4\x2d\x2f\xd0\xab\xf6\x2b\x8e\xdd\xbd\xe5\x75\x2c\xb9\xd3\xe8\x53\x48\x4b\x59\x2b\xee\xcb\x3e\x79\x98\xb5\x33\x68\x4f\x9b\xc2\x85\xde\xde\x61\x6c\xab\xe4\x3b\x85\xee\x0b\x0d\x1e\xcc\xa5\x34\xa4\x65\xc2\x2d\xd0\x58\x50\x68\xea\xc6\xe2\x40\x8b\x6a\xc1\xa9\x0a\x52\x7d\xab\x26\xce\x8b\x29\xbc\x39\xc2\x14\x80\x1f\x7f\x84\x37\x66\xba\xe6\x10\xcb\x94\x5a\xab\xee\x90\x9d\x85\xf2\xb5\x1e\xc9\x63\xaa\xb6\x7a\x35\xa4\x3b\x9f\xb7\xd1\xa3\x84\xbc\xd7\x2b\x79\xb1\x6c\x80\x5b\x68\x38\xdd\x69\xe3\x5a\xaa\xda\xe0\x84\x16\xe6\x7d\xc0\x81\x6b\x15\xad\xba\x9a\xd6\x49\xe4\x9d\xe6\x33\xdb\xba\x5c\x9d\x4f\xf9\x1e\x30\xe2\x1b\xaa\x15\x29\x57\x09\x97\xe1\x6b\xdb\x13\x2f\x04\x59\x31\x56\x89\x2b\x3a\x95\x06\x2d\x09\xa0\xbc\x44\xf4\x8d\xf9\x48\x2b\x70\xdf\xd4\xad\x12\x09\x4d\x7b\xbf\xf7\x87\xd2\xa1\xe6\x91\x59\xfd\x8d\x41\x1b\x26\xb2\x69\xa8\xb6\x9d\xdf\xbc\x8e\x29\xca\xcf\x54\x08\xb2\x6c\xec\xfd\x20\xe2\xee\x4a\x2c\xf1\xa6\x55\x2e\x00\x3e\x4b\x04\x8b\xa9\x17\xb3\xa5\x93\xaf\x56\x6f\x21\x38\x59\xcd\xa3\x9c\xea\xde\xba\xb3\x4a\x06\x97\x71\x2c\xba\xc2\x9b\x75\xab\xf4\x66\xfd\x7d\x12\x78\x1d\x5f\x19\x95\x51\xd0\xee\x34\x69\x94\xa9\x96\x8c\xd6\x07\x5a\xb5\x4a\xe9\x54\xac\x6f\xae\xdb\x2c\xa5\x56\xbd\x3c\x81\xa6\xbd\x37\x8b\xe8\xe6\x23\x73\xf4\x98\xc2\x69\xd5\xf6\x61\xe9\x70\xc8\xb9\xac\x07\x17\xcc\xe3\x05\xae\x9d\x9d\xee\xc7\x37\x2a\xc8\xd6\x43\xbf\xa5\xa2\xb4\x4a\xdd\x97\xeb\xba\xd4\x52\x21\x7f\x51\xea\xc7\xdc\xd3\x7f\x4f\x8f\x3c\x77\xda\x14\x29\xd2\x4a\xf3\xd9\xb7\xf6\x5f\xd0\xe4\x34\xe2\xfb\x41\x21\xe2\xf5\x8a\x61\x4e\xd5\x15\x2a\xa7\x9b\x0e\xf9\x39\x5b\xb6\xe1\x3d\xcf\x55\xe5\xe8\x35\x9f\xea\x4d\x43\x73\xc3\xa9\x17\x48\x95\x2b\xb3\x6e\x46\xf2\x96\x66\x53\x69\x8f\x90\xaa\xb8\xab\x07\xde\x66\x06\xb5\x7e\xa8\x60\xca\xba\x99\x32\xcd\x54\xbd\x17\x1b\xae\xcd\xb8\x9b\xab\xb8\x9f\x76\x49\xcc\x5e\xe6\xcd\xba\x78\x37\x93\x6e\xde\xe2\xda\xdb\x29\xf7\x65\xde\x4e\xb9\x45\xb7\x58\x6b\x3e\x6b\x27\xc1\x0e\xae\xa8\xc2\xf0\x2b\x58\xe5\x97\xe8\x16\x4c\xc1\x2a\x0d\x6b\xa7\x43\xdb\x5b\x86\xfc\x3e\x80\x17\xde\x9a\xee\xaa\x46\xa9\x17\x09\x47\x7f\xf7\xb5\x40\xfd\x3c\x7b\xf5\x27\x37\x57\x29\xd1\x50\xdd\x5c\x78\x8d\xee\x92\x93\x44\xa8\x97\xdd\xb5\xab\xcc\xf7\x46\x0b\xb3\x57\xf2\x70\x6f\x50\xa3\x45\x01\x98\xcf\x99\x7a\xb7\x2c\xc3\x48\x78\x48\xfe\xfe\x3d\xdb\x38\x8d\xc3\x1c\x15\x54\x44\x8a\x16\xbd\xa2\x7f\xf4\xdb\xd2\xe1\xa4\x85\x32\x2b\x28\x33\x43\x69\x5e\x9b\xb6\x92\xe6\xd7\x2f\xce\x54\xbd\x73\xc6\xbf\x8c\xd0\x9b\xdc\xb8\x9d\xa3\xbb\xfb\x76\x93\x67\x5b\xad\x6e\xcd\x4a\xd1\x02\x3c\x7a\x1e\x68\xfb\x5c\x95\xe0\xeb\xc4\x29\xb9\x2d\x38\xf0\x36\x21\x66\xf1\x10\xe7\xad\xbe\xf2\xd8\xfe\x52\x67\xce\xb9\x6a\x2e\x57\x0e\xd7\x6b\xfa\x6d\x8d\x8d\x04\x26\xb3\xe6\x9e\x3d\xab\x41\xa9\x80\xed\xff\xa2\xc2\xe7\x20\x7a\xc4\x7e\xf4\xc8\x5a\x72\x92\x86\x03\xc2\x29\x51\xff\x61\xe1\xac\x5e\x8d\x92\x74\x2d\xf3\x7f\xb0\xe6\x6b\x29\x59\x62\x69\x6a\x14\xf8\x5e\xe2\xf3\x23\x89\xd7\xb8\x74\x8d\xf2\x81\x25\x7e\x8c\x35\x50\x2f\x3a\x7d\x85\xa2\xb9\x8f\x7b\x87\x43\xf3\x67\x50\xaf\xf7\xdf\x00\x00\x00\xff\xff\x66\x57\x8b\x6f\x8d\x1e\x00\x00")

func assetsIndexHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtmlTmpl,
		"assets/index.html.tmpl",
	)
}

func assetsIndexHtmlTmpl() (*asset, error) {
	bytes, err := assetsIndexHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html.tmpl", size: 7821, mode: os.FileMode(420), modTime: time.Unix(1457041338, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html.tmpl": assetsIndexHtmlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html.tmpl": &bintree{assetsIndexHtmlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

