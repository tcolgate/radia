<!DOCTYPE html>
<!--
 Copyright (c) 2016 Tristan Colgate-McFarlane

 This file is part of vonq.

 vonq is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 vonq is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with vonq.  If not, see <http://www.gnu.org/licenses/>.
-->

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.15/d3.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.11.2/moment-with-locales.min.js"></script>

<style type="text/css">
  .link {
    stroke: #000;
    stroke-width: 1.5px;
  }

  .node {
    fill: #000;
    stroke: #fff;
    stroke-width: 1.5px;
  }
</style>

<body>
  <script>
      var ws = new WebSocket("ws://localhost:12345/updates");

      var width = 960,
          height = 500;

      var color = d3.scale.category10();

      var nodes = [],
          halfLinks = [],
          links = [];

      var nodesIdx = {}; // map node IDs to nodes index
      var halfLinksIdx = {}; // map half edge IDs to edges index
      var linksIdx = {}; // map edge IDs to edges index

      var force = d3.layout.force()
          .nodes(nodes)
          .links(links)
          .charge(-400)
          .linkDistance(linkDist)
          .size([width, height])
          .on("tick",tick);

      var svg = d3.select("body").append("svg")
          .attr("width", width)
          .attr("height", height);

      var node = svg.selectAll(".node"),
          link = svg.selectAll(".link");

      function linkDist(l,li){
        //return l.cost * 6
        return 6
      }

      function start() {
        link = link.data(force.links(), function(d) { return d.source.id + "-" + d.target.id; });
        link.enter().insert("line", ".node").attr("class", "link");
        link.exit().remove();

        node = node.data(force.nodes(), function(d) { return d.id;});
        node.enter().append("circle").attr("class", function(d) { return "node " + d.id; }).attr("r", 8);
        node.exit().remove();

        force.start();
      }

      function nodeUpdate(ts,id,state) {
        console.log("nu",ts,id,state);
        if(! nodesIdx.hasOwnProperty(id)){
          let n = {"id": id};
          nodes.push(n);
          nodesIdx[id] = nodes.length - 1;
          console.log("nodes", nodes);
          console.log("nodesIdx", nodesIdx);
        };
      }

      function edgeUpdate(ts,id,edgeName,state) {
        console.log("eu",ts,id,edgeName,state);
        if(!linksIdx.hasOwnProperty(edgeName)){
          if(!halfLinks.hasOwnProperty(edgeName)){
            var newhenode = nodes[nodesIdx[id]];
            var newhe = {"source": newhenode};
            halfLinks[edgeName] = newhe;
            console.log("hls", halfLinks);
          } else {
            console.log("GOT HERE");
            var oldhe = halfLinks[edgeName];
            if (oldhe.source != id){
              if (!oldhe.hasOwnProperty("target")){
                console.log("old half edge",oldhe);
                var newtnode = nodes[nodesIdx[id]];
                console.log("newtnode", newtnode);
                var newlink = {"source": oldhe.source,"target": newtnode};
                console.log("new link",newlink);
                links.push(newlink);
                linksIdx[edgeName] = links.length - 1;
                halfLinks[edgeName] = newlink;

                console.log("links", links);
                console.log("linksIdx", linksIdx);
              };
            };
          };
        };
      };

      function edgeMessage(ts,id,edgeName,dir,msgStr) {
        console.log(msgStr);
        let msg = JSON.parse(msgStr)["U"];
        console.log("em",ts,id,edgeName,dir,msg);
      }

      ws.onmessage = function(e) {
        var data = JSON.parse(e.data);
        if(data.hasOwnProperty("Type")){
          if (data["Type"] == "nodeUpdate"){
            nodeUpdate(data["T"], data["NodeID"], data["State"]);
          } else if (data["Type"] == "edgeUpdate"){
            edgeUpdate(data["T"], data["NodeID"], data["EdgeName"], data["State"]);
          } else if (data["Type"] == "edgeMessage"){
            edgeMessage(data['T'], data["NodeID"], data["EdgeName"], data["Dir"], data["Message"]);
          } else if (data["Type"] == "log"){
            console.log(data.Log);
          } else {
            console.log(data);
          }
        }
        start();
      };

      function tick() {
        node.attr("cx", function(d) { return d.x; })
            .attr("cy", function(d) { return d.y; })

        link.attr("x1", function(d) { return d.source.x; })
            .attr("y1", function(d) { return d.source.y; })
            .attr("x2", function(d) { return d.target.x; })
            .attr("y2", function(d) { return d.target.y; });
      };

      function run(){
        d3.xhr("/run").get(function( data ) {
          console.log("Requested run");
        });
      };
      
      start();
  </script>
  <div id="graph-area"></div>
  <input type="button" id="runBtn" value="Run" onclick="run()"></input>
</body>


