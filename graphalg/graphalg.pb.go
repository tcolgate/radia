// Code generated by protoc-gen-go.
// source: graphalg.proto
// DO NOT EDIT!

/*
Package graphalg is a generated protocol buffer package.

It is generated from these files:
	graphalg.proto

It has these top-level messages:
	Weight
	Message
	SendMessageRequest
	Error
	SendMessageResponse
	TestMessage
	EdgeWeightRequest
	EdgeWeightResponse
*/
package graphalg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import graph "github.com/tcolgate/radia/graph"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Weight struct {
	Cost float64 `protobuf:"fixed64,1,opt,name=Cost,json=cost" json:"Cost,omitempty"`
	Lsn  string  `protobuf:"bytes,2,opt,name=Lsn,json=lsn" json:"Lsn,omitempty"`
	Msn  string  `protobuf:"bytes,3,opt,name=Msn,json=msn" json:"Msn,omitempty"`
}

func (m *Weight) Reset()                    { *m = Weight{} }
func (m *Weight) String() string            { return proto.CompactTextString(m) }
func (*Weight) ProtoMessage()               {}
func (*Weight) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Message struct {
	Payload *google_protobuf.Any `protobuf:"bytes,4,opt,name=Payload,json=payload" json:"Payload,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Message) GetPayload() *google_protobuf.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SendMessageRequest struct {
	From string             `protobuf:"bytes,1,opt,name=From,json=from" json:"From,omitempty"`
	To   string             `protobuf:"bytes,2,opt,name=To,json=to" json:"To,omitempty"`
	Gid  *graph.GraphID     `protobuf:"bytes,3,opt,name=gid" json:"gid,omitempty"`
	Aid  *graph.AlgorithmID `protobuf:"bytes,4,opt,name=aid" json:"aid,omitempty"`
	Msg  *Message           `protobuf:"bytes,5,opt,name=msg" json:"msg,omitempty"`
}

func (m *SendMessageRequest) Reset()                    { *m = SendMessageRequest{} }
func (m *SendMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*SendMessageRequest) ProtoMessage()               {}
func (*SendMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SendMessageRequest) GetGid() *graph.GraphID {
	if m != nil {
		return m.Gid
	}
	return nil
}

func (m *SendMessageRequest) GetAid() *graph.AlgorithmID {
	if m != nil {
		return m.Aid
	}
	return nil
}

func (m *SendMessageRequest) GetMsg() *Message {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Error struct {
	Error int32  `protobuf:"varint,1,opt,name=error" json:"error,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SendMessageResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *SendMessageResponse) Reset()                    { *m = SendMessageResponse{} }
func (m *SendMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*SendMessageResponse) ProtoMessage()               {}
func (*SendMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SendMessageResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type TestMessage struct {
	Value int32 `protobuf:"varint,1,opt,name=Value,json=value" json:"Value,omitempty"`
}

func (m *TestMessage) Reset()                    { *m = TestMessage{} }
func (m *TestMessage) String() string            { return proto.CompactTextString(m) }
func (*TestMessage) ProtoMessage()               {}
func (*TestMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type EdgeWeightRequest struct {
	From   string         `protobuf:"bytes,1,opt,name=From,json=from" json:"From,omitempty"`
	To     string         `protobuf:"bytes,2,opt,name=To,json=to" json:"To,omitempty"`
	Gid    *graph.GraphID `protobuf:"bytes,3,opt,name=gid" json:"gid,omitempty"`
	Weight *Weight        `protobuf:"bytes,4,opt,name=weight" json:"weight,omitempty"`
}

func (m *EdgeWeightRequest) Reset()                    { *m = EdgeWeightRequest{} }
func (m *EdgeWeightRequest) String() string            { return proto.CompactTextString(m) }
func (*EdgeWeightRequest) ProtoMessage()               {}
func (*EdgeWeightRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EdgeWeightRequest) GetGid() *graph.GraphID {
	if m != nil {
		return m.Gid
	}
	return nil
}

func (m *EdgeWeightRequest) GetWeight() *Weight {
	if m != nil {
		return m.Weight
	}
	return nil
}

type EdgeWeightResponse struct {
	Error  *Error  `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Weight *Weight `protobuf:"bytes,2,opt,name=weight" json:"weight,omitempty"`
}

func (m *EdgeWeightResponse) Reset()                    { *m = EdgeWeightResponse{} }
func (m *EdgeWeightResponse) String() string            { return proto.CompactTextString(m) }
func (*EdgeWeightResponse) ProtoMessage()               {}
func (*EdgeWeightResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *EdgeWeightResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *EdgeWeightResponse) GetWeight() *Weight {
	if m != nil {
		return m.Weight
	}
	return nil
}

func init() {
	proto.RegisterType((*Weight)(nil), "graphalg.Weight")
	proto.RegisterType((*Message)(nil), "graphalg.Message")
	proto.RegisterType((*SendMessageRequest)(nil), "graphalg.SendMessageRequest")
	proto.RegisterType((*Error)(nil), "graphalg.Error")
	proto.RegisterType((*SendMessageResponse)(nil), "graphalg.SendMessageResponse")
	proto.RegisterType((*TestMessage)(nil), "graphalg.TestMessage")
	proto.RegisterType((*EdgeWeightRequest)(nil), "graphalg.EdgeWeightRequest")
	proto.RegisterType((*EdgeWeightResponse)(nil), "graphalg.EdgeWeightResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for MessageService service

type MessageServiceClient interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	EdgeWeight(ctx context.Context, in *EdgeWeightRequest, opts ...grpc.CallOption) (*EdgeWeightResponse, error)
}

type messageServiceClient struct {
	cc *grpc.ClientConn
}

func NewMessageServiceClient(cc *grpc.ClientConn) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := grpc.Invoke(ctx, "/graphalg.MessageService/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) EdgeWeight(ctx context.Context, in *EdgeWeightRequest, opts ...grpc.CallOption) (*EdgeWeightResponse, error) {
	out := new(EdgeWeightResponse)
	err := grpc.Invoke(ctx, "/graphalg.MessageService/EdgeWeight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageService service

type MessageServiceServer interface {
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	EdgeWeight(context.Context, *EdgeWeightRequest) (*EdgeWeightResponse, error)
}

func RegisterMessageServiceServer(s *grpc.Server, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(MessageServiceServer).SendMessage(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MessageService_EdgeWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EdgeWeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(MessageServiceServer).EdgeWeight(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "graphalg.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _MessageService_SendMessage_Handler,
		},
		{
			MethodName: "EdgeWeight",
			Handler:    _MessageService_EdgeWeight_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x52, 0xdf, 0x6b, 0xd4, 0x40,
	0x10, 0x26, 0xc9, 0xfd, 0xb0, 0x13, 0x38, 0xdb, 0xb1, 0x0f, 0xc7, 0x59, 0xa1, 0xa4, 0x0a, 0x05,
	0x21, 0x81, 0xf3, 0x49, 0xf0, 0xc1, 0xa2, 0xb5, 0x28, 0x16, 0x24, 0x2d, 0xfa, 0xbc, 0x77, 0x99,
	0xee, 0x05, 0x72, 0xd9, 0xb8, 0x9b, 0xab, 0xdc, 0xb3, 0x7f, 0x8b, 0xff, 0xa7, 0xfb, 0x2b, 0x5e,
	0xfc, 0x09, 0x42, 0x1f, 0x12, 0x76, 0x67, 0xbe, 0x99, 0xef, 0x9b, 0x6f, 0x07, 0x26, 0x5c, 0xb2,
	0x66, 0xc5, 0x2a, 0x9e, 0x36, 0x52, 0xb4, 0x02, 0xef, 0x75, 0xf7, 0x59, 0xc6, 0xcb, 0x76, 0xb5,
	0x59, 0xa4, 0x4b, 0xb1, 0xce, 0xb8, 0xa8, 0x58, 0xcd, 0x33, 0x0b, 0x59, 0x6c, 0x6e, 0xb2, 0xa6,
	0xdd, 0x36, 0xa4, 0x32, 0x56, 0x6f, 0xcd, 0xe7, 0x4a, 0x67, 0x4f, 0x7b, 0x05, 0xed, 0x52, 0x54,
	0x9c, 0xb5, 0x94, 0x49, 0x56, 0x94, 0x2c, 0xb3, 0x4d, 0xdd, 0xdf, 0x81, 0x93, 0x97, 0x30, 0xfa,
	0x44, 0x25, 0x5f, 0xb5, 0x88, 0x30, 0x78, 0x25, 0x54, 0x3b, 0x0d, 0x8e, 0x83, 0xd3, 0x20, 0x1f,
	0x2c, 0xf5, 0x19, 0xf7, 0x21, 0x7a, 0xaf, 0xea, 0x69, 0xa8, 0x43, 0x7b, 0x79, 0x54, 0xa9, 0xda,
	0x44, 0x2e, 0x75, 0x24, 0x72, 0x91, 0xb5, 0xaa, 0x93, 0xe7, 0x30, 0xbe, 0x24, 0xa5, 0x18, 0x27,
	0x4c, 0x61, 0xfc, 0x81, 0x6d, 0x2b, 0xc1, 0x8a, 0xe9, 0x40, 0x03, 0xe2, 0xf9, 0x61, 0xca, 0x85,
	0xe0, 0x15, 0xa5, 0x9d, 0xe2, 0xf4, 0xac, 0xde, 0xe6, 0xe3, 0xc6, 0x81, 0x92, 0x6f, 0x01, 0xe0,
	0x15, 0xd5, 0x85, 0xaf, 0xcf, 0xe9, 0xf3, 0x86, 0x94, 0x55, 0xf2, 0x46, 0x8a, 0xb5, 0x55, 0xb2,
	0x97, 0x0f, 0x6e, 0xf4, 0x19, 0x27, 0x10, 0x5e, 0x0b, 0x2f, 0x24, 0xd4, 0xfe, 0x1c, 0x43, 0xc4,
	0xcb, 0xc2, 0xea, 0x88, 0xe7, 0x93, 0xd4, 0x8d, 0x74, 0x61, 0xfe, 0x6f, 0x5f, 0xe7, 0x26, 0x85,
	0x8f, 0x21, 0x62, 0x65, 0x27, 0x04, 0x3d, 0xe2, 0xac, 0xe2, 0x42, 0x6a, 0x7b, 0xd6, 0x06, 0xa5,
	0xd3, 0x78, 0x02, 0x7a, 0x08, 0x3e, 0x1d, 0x5a, 0xd4, 0x41, 0xfa, 0xe3, 0x15, 0x3a, 0x49, 0x26,
	0x9b, 0x64, 0x30, 0x3c, 0x97, 0x52, 0x48, 0x3c, 0x84, 0x21, 0x99, 0x83, 0x95, 0x36, 0xcc, 0xdd,
	0xc5, 0x78, 0x62, 0x7a, 0x84, 0x9d, 0x27, 0x3c, 0x79, 0x01, 0x0f, 0x7e, 0x9a, 0x4b, 0x35, 0xa2,
	0x56, 0x84, 0x4f, 0xfa, 0xe5, 0xf1, 0xfc, 0xfe, 0x8e, 0xce, 0xb6, 0xf7, 0xfd, 0x92, 0x13, 0x88,
	0xaf, 0xb5, 0x0f, 0x9d, 0xab, 0x9a, 0xf4, 0x23, 0xab, 0x36, 0xd4, 0x91, 0xde, 0x9a, 0x4b, 0xf2,
	0x35, 0x80, 0x83, 0xf3, 0x82, 0x93, 0x7b, 0xbd, 0xbb, 0xb5, 0xee, 0x14, 0x46, 0x5f, 0x6c, 0x5b,
	0xef, 0xde, 0xfe, 0x4e, 0xa8, 0xa7, 0xf3, 0xf9, 0x84, 0x00, 0xfb, 0x22, 0xfe, 0x6b, 0xce, 0x1e,
	0x4d, 0xf8, 0x6f, 0x9a, 0xb9, 0x5e, 0x94, 0x89, 0xb7, 0xe3, 0x8a, 0xe4, 0x6d, 0xb9, 0x24, 0x7c,
	0x07, 0x71, 0xcf, 0x62, 0x3c, 0xda, 0xd5, 0xfe, 0xbe, 0x51, 0xb3, 0x47, 0x7f, 0xc9, 0x7a, 0xbd,
	0x17, 0x00, 0xbb, 0x29, 0xf0, 0x61, 0x4f, 0xee, 0xaf, 0x06, 0xcf, 0x8e, 0xfe, 0x9c, 0x74, 0x8d,
	0x16, 0x23, 0xbb, 0xe7, 0xcf, 0xbe, 0x07, 0x00, 0x00, 0xff, 0xff, 0x99, 0x70, 0xdb, 0xc8, 0xce,
	0x03, 0x00, 0x00,
}
