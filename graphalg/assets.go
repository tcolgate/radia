package graphalg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _assets_index_html_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\x58\xf6\x42\xa1\x8e\x64\x67\x93\xa6\x75\x7e\x80\x6d\x77\x51\xa0\x87\x6e\xb1\x5b\xa0\x28\x82\x1c\x68\x8a\xb2\x98\x30\xa2\x4a\x52\xb6\xd5\xc0\xef\xde\x21\x29\xd9\x94\x6d\x75\xeb\x83\x22\xcd\xcc\x37\x3f\xdf\x0c\x27\xbc\xfb\xe6\xc3\xa7\x9f\xff\xf8\xeb\xf7\x8f\xa8\xb4\xaf\xf2\x61\x72\x67\x98\x16\xb5\x45\x46\xb3\x7b\x5c\x5a\x5b\x9b\x45\x96\xb1\xbc\x7a\x36\x29\x93\xaa\xc9\x0b\x49\x35\x4f\x99\x7a\xcd\xe8\x33\xdd\x66\x52\x2c\x4d\x96\xbf\xcb\xde\xa5\xd7\xe9\xfc\x1a\xde\xd2\x57\x51\xa5\xcf\x06\x3f\xdc\x65\xc1\xd3\xc3\x04\x7c\xda\x56\x72\x64\xdb\x9a\xdf\x63\xcb\xb7\x36\x63\x06\x2c\x26\x08\xa5\xac\xa4\xda\x22\xcd\x99\x45\x6f\xf0\x8d\x50\x21\xa4\x5c\x20\x63\x39\x97\x4b\xd9\xf0\x5b\x2f\x34\x56\xab\x17\xbe\x40\x9b\x52\x58\x2f\xda\x4d\x1c\x58\x8a\xea\xa5\x83\xf5\x16\xdf\xce\x66\xb3\x18\x73\xb1\x11\xb9\x2d\x17\x68\x9e\x5e\xd7\xdb\x03\xb2\x52\x39\x1f\x04\x3c\xc6\x81\xa4\x28\x8a\xff\xe9\x29\xa5\xe8\xad\xf7\x33\x2f\x6e\x6e\x96\x57\xb7\xa0\xed\x95\xcb\x83\xb2\x28\x6e\x8a\x19\x8f\x95\xec\xa0\xbc\x64\x74\x76\xc9\x9c\x12\xa8\x73\x84\x39\xe6\x96\x2a\x6f\x1d\x51\x77\x3d\x99\xc8\xff\xd6\x54\xa3\x8d\x41\xf7\xa8\xe2\x1b\xf4\x27\x5f\x7e\x51\xec\x85\x5b\x82\x37\xae\x5b\x52\x31\x2a\x4b\x65\xec\x62\x7e\xf9\xee\xea\x3a\x6b\xea\x9c\x5a\x6e\x70\x72\x3b\x89\xe1\xae\x1c\xf0\xf0\xe3\xf7\xb3\x69\x27\x76\xbf\x92\x8b\x55\x69\x41\x7e\xed\x08\x89\xec\x99\x92\x4a\x83\x1c\x5a\x6c\xc0\x3f\xa4\x0e\x4e\x57\x4a\xb7\xf3\x19\x19\x7a\x76\x85\xb9\xdc\x1e\x9f\x62\xc7\xae\x59\x41\x3a\x30\x2e\x94\x66\x3c\xb8\x95\xb4\x55\x8d\x4d\xbd\x84\x24\x11\xd4\x53\x65\x88\x7f\x0e\xe4\xde\x27\xf1\xcf\x81\xdc\x4d\xd5\x8a\x93\x8b\xab\xd9\xec\xc4\xfe\x83\x30\x96\x56\x10\xa1\xff\x18\x58\x18\xf1\x0f\x27\x8f\x9e\x9b\x69\xc7\xc5\xd3\xc0\x40\x55\x04\x5b\xc1\x5e\xf0\xd4\x3d\x87\x85\x9b\xf5\xaa\x23\x88\x4b\x98\x68\x82\x5d\xf7\x70\x92\xd2\xba\xe6\x55\x4e\x30\xe8\xf1\xc0\x19\xb5\x56\x43\xd3\x5c\x34\x3c\x0d\x1d\x39\xa3\x0f\x69\xe0\x3e\x9f\x53\xb2\x21\x28\xb8\xee\xa2\xbe\x97\x92\x60\xcf\x18\x4e\x8e\xf9\x3f\x63\xe8\xc4\xd1\x64\x14\x4d\xc5\xac\x50\x15\xea\xd9\x21\x72\x2a\x45\xf2\xb6\x77\xa4\xb9\x6d\x34\xa8\x61\x05\x18\xdb\x49\x77\x27\xe8\x30\x72\x04\x1e\x34\x41\x07\x70\x96\xa1\xf7\x79\x8e\x68\xd5\x86\x21\xd9\x2b\x9c\x61\xe8\xb2\x6b\xff\x47\xca\x4a\xd2\xfb\x22\x55\x14\x1d\x05\x5c\x5a\x37\xa6\x04\xc5\xed\x5e\xb1\x3b\x94\x10\x8f\xda\x30\x80\x97\x9f\x06\x90\x83\x00\xc1\xc8\x07\x78\x33\xaa\x81\x59\x5c\x84\xa0\x8f\x32\x0d\xdf\x4f\x53\xeb\xc6\xcb\x1e\xe4\xe1\xfb\x69\x8a\x1c\x29\x8b\x8e\x9c\xdd\x51\x7a\xfd\xbb\x9f\xef\xe1\xe8\xee\x75\x30\x9a\xda\x92\xbd\xf1\xee\xb4\x2f\x9d\x45\x44\x6a\xd7\x58\xf7\x27\x75\x65\x92\x38\x40\x32\xdd\x43\x49\x0e\xa8\xbe\x7f\x79\x57\x4b\x2a\x72\xf4\x1d\xc2\x17\x18\x9e\x79\x57\x07\xc8\x6e\x07\x19\x7b\xd7\xbc\xb2\x5c\x93\x24\x15\x95\xe1\x90\x01\x06\x21\x87\x99\xec\x47\xad\x9b\x55\x26\x29\xac\x76\x10\xf7\x73\x35\xf4\xb1\x15\x90\x7b\xaa\xf9\xab\x5a\x73\x12\xb7\xac\x1b\x63\xbf\x13\xa3\x22\xc2\xc1\x1f\x2f\x02\x32\x8d\x13\xf5\xf0\x3e\xd1\xfe\xd4\x31\xa1\x99\x3c\xcd\xf0\xac\x47\xec\xf3\x08\x64\x04\x16\x3a\x94\x06\xc4\x0f\x27\x91\x46\xcb\x09\xd9\x1f\x77\xb3\xd7\x6f\x0c\xac\x91\x57\x6e\x0c\x5d\xb9\xa2\xf7\x99\xf0\xb8\xad\x4c\x55\x46\xc1\x9a\x95\x6a\x45\xf0\x2f\x0a\xc6\xca\xa5\xc5\xd7\x50\x9e\x67\x28\x4a\xc6\xed\x01\x27\x02\x5f\xbf\x7e\xf9\xf4\x5b\x5a\x53\x6d\x38\x39\x6b\x1a\x1f\xcc\xff\x98\x32\xb7\xdb\xc8\x68\x36\x7e\xff\x25\x43\x2e\x3a\x72\xb7\x63\xcc\xe6\xe9\xd6\xd1\x19\x1d\xb4\xfd\x7e\x63\xed\x38\xa8\xf5\xa0\xe1\x14\x05\xd4\x76\x3e\x8e\xea\x66\x7b\x34\x62\xfb\x75\x6c\x3b\x86\xdd\x5e\x8e\x63\xbb\xf3\x33\x1e\xf7\xeb\xd8\x36\x3e\x7a\x67\x3a\xa3\x9b\x8a\x44\xfb\x0a\xfe\xd9\x6c\x4b\xf0\x9c\x81\x1c\x46\x1c\x3c\x1c\xf6\x5a\x98\x89\xb8\x8b\x47\x7d\xfc\xcc\xff\x6e\x38\x5c\xb5\x72\xe4\xd1\xe7\xd6\xd5\xce\xbd\x1c\xae\x72\xf0\x9e\x8b\x35\x12\xf9\x3d\x5e\x69\x5a\x97\x17\x70\x19\xa4\xee\xae\x07\x52\xaf\x15\x55\xdd\xd8\xee\xa6\xb7\x6c\xac\x55\x15\xf6\xd6\x10\xe0\x27\x0b\xef\x6b\x0a\x97\xba\x7b\xfc\x19\xe2\x21\x55\x31\x09\x93\xe4\x95\x24\x71\x5e\x3c\x1a\xee\xa0\x59\xb8\xf6\x4c\x26\xff\x06\x00\x00\xff\xff\xda\xa1\xbf\x33\x9e\x0a\x00\x00")

func assets_index_html_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_assets_index_html_tmpl,
		"assets/index.html.tmpl",
	)
}

func assets_index_html_tmpl() (*asset, error) {
	bytes, err := assets_index_html_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/index.html.tmpl", size: 2718, mode: os.FileMode(420), modTime: time.Unix(1455466623, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html.tmpl": assets_index_html_tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assets": &_bintree_t{nil, map[string]*_bintree_t{
		"index.html.tmpl": &_bintree_t{assets_index_html_tmpl, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

